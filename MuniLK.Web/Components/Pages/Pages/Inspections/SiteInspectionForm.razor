@using Microsoft.AspNetCore.Components.Forms
@using MuniLK.Application.BuildingAndPlanning.DTOs
@using MuniLK.Application.Documents.DTOs
@using MuniLK.Domain.Constants.Flows
@using MuniLK.Web.Components.Pages.Generic.Documents
@using MuniLK.Web.Components.Pages.Notifications
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Grids
@using Microsoft.JSInterop
@using System.Net.Http.Json
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS

<div class="container-xxl py-3">
    <div class="card shadow-sm">
        <div class="card-header bg-light d-flex align-items-center justify-content-between">
            <h5 class="mb-0">Site Inspection Report</h5>
            <div class="d-flex align-items-center gap-2">
                @if (!string.IsNullOrWhiteSpace(ApplicationNumber))
                {
                    <span class="badge bg-primary-subtle text-primary">App No: @ApplicationNumber</span>
                }
            </div>
        </div>
        <div class="card-body">
            <AlertToast @ref="MyToast" />

            <EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                @if (MetadataLocked)
                {
                    <small class="text-muted">Locked (reschedule in previous step to change)</small>
                }
                <!-- Core Inspection Details -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h6 class="text-primary mb-3">üìã Inspection Overview</h6>
                    </div>
                    
                    <div class="col-md-6">
                        <label class="form-label">Inspection Status <span class="text-danger">*</span></label>
                        <SfDropDownList TValue="InspectionStatus" TItem="InspectionStatusOption" 
                                      @bind-Value="Model.Status" DataSource="@InspectionStatusOptions" 
                                      Placeholder="Select Status" CssClass="form-control">
                            <DropDownListFieldSettings Value="Value" Text="Text" />
                        </SfDropDownList>
                        <ValidationMessage For="@(() => Model.Status)" />
                    </div>
                    
                    <div class="col-md-6">
                        <label class="form-label">Inspection Date <span class="text-danger">*</span></label>
                        <SfDatePicker TValue="DateTime" @bind-Value="Model.InspectionDate"
                                      Enabled="@( !MetadataLocked )"
                                      CssClass="form-control" />
                        <ValidationMessage For="@(() => Model.InspectionDate)" />
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-md-6">
                        <label class="form-label">Officers Present</label>
                        <!-- Multi-select of inspectors; selected names joined into Model.OfficersPresent -->
                        <SfMultiSelect TValue="List<string>" TItem="InspectorOption"
                                       @bind-Value="SelectedInspectorIds"
                                       DataSource="InspectorOptions"
                                       Enabled="@( !MetadataLocked )"
                                       Placeholder="Select officers present"
                                       Mode="@VisualMode.CheckBox"
                                       ShowSelectAll="true"
                                       ClosePopupOnSelect="false"
                                       CssClass="form-control">
                            <MultiSelectFieldSettings Value="Id" Text="Name" />
                        </SfMultiSelect>
                    </div>
                    
                    <div class="col-md-6">
                        <label class="form-label">GPS Coordinates</label>
                        <SfTextBox @bind-Value="Model.GpsCoordinates" 
                                 Placeholder="Latitude, Longitude" CssClass="form-control" />
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-12">
                        <label class="form-label">General Remarks</label>
                        <SfTextBox @bind-Value="Model.Remarks" Multiline="true" 
                                 CssClass="form-control" Placeholder="General inspection notes" />
                    </div>
                </div>

                <!-- Site Conditions Section -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h6 class="text-primary mb-3">üèóÔ∏è Site Conditions Verification</h6>
                    </div>
                    
                    <!-- Access Road Width -->
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Access Road Width Condition</label>
                        <div class="d-flex gap-3">
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.AccessRoadWidthCondition" 
                                         Value="true" Name="accessRoad" Label="Yes" />
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.AccessRoadWidthCondition" 
                                         Value="false" Name="accessRoad" Label="No" />
                        </div>
                    </div>
                    <div class="col-md-8 mb-3">
                        <label class="form-label">Notes</label>
                        <SfTextBox @bind-Value="Model.AccessRoadWidthNotes" CssClass="form-control" />
                    </div>

                    <!-- Boundary Verification -->
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Boundary Verification</label>
                        <div class="d-flex gap-3">
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.BoundaryVerification" 
                                         Value="true" Name="boundary" Label="Yes" />
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.BoundaryVerification" 
                                         Value="false" Name="boundary" Label="No" />
                        </div>
                    </div>
                    <div class="col-md-8 mb-3">
                        <label class="form-label">Notes</label>
                        <SfTextBox @bind-Value="Model.BoundaryVerificationNotes" CssClass="form-control" />
                    </div>

                    <!-- Topography -->
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Topography</label>
                        <div class="d-flex gap-3">
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.Topography" 
                                         Value="true" Name="topography" Label="Suitable" />
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.Topography" 
                                         Value="false" Name="topography" Label="Unsuitable" />
                        </div>
                    </div>
                    <div class="col-md-8 mb-3">
                        <label class="form-label">Notes</label>
                        <SfTextBox @bind-Value="Model.TopographyNotes" CssClass="form-control" />
                    </div>

                    <!-- Existing Structures -->
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Existing Structures</label>
                        <div class="d-flex gap-3">
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.ExistingStructures" 
                                         Value="true" Name="structures" Label="Present" />
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.ExistingStructures" 
                                         Value="false" Name="structures" Label="None" />
                        </div>
                    </div>
                    <div class="col-md-8 mb-3">
                        <label class="form-label">Notes</label>
                        <SfTextBox @bind-Value="Model.ExistingStructuresNotes" CssClass="form-control" />
                    </div>

                    <!-- Encroachments -->
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Encroachments/Reservations</label>
                        <div class="d-flex gap-3">
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.EncroachmentsReservations" 
                                         Value="true" Name="encroachments" Label="Present" />
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.EncroachmentsReservations" 
                                         Value="false" Name="encroachments" Label="None" />
                        </div>
                    </div>
                    <div class="col-md-8 mb-3">
                        <label class="form-label">Notes</label>
                        <SfTextBox @bind-Value="Model.EncroachmentsReservationsNotes" CssClass="form-control" />
                    </div>
                </div>

                <!-- Compliance Checks Section -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h6 class="text-primary mb-3">‚úÖ Compliance Checks</h6>
                    </div>
                    
                    <!-- Matches Survey Plan -->
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Matches Survey Plan</label>
                        <div class="d-flex gap-3">
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.MatchesSurveyPlan" 
                                         Value="true" Name="survey" Label="Yes" />
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.MatchesSurveyPlan" 
                                         Value="false" Name="survey" Label="No" />
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Notes</label>
                        <SfTextBox @bind-Value="Model.MatchesSurveyPlanNotes" CssClass="form-control" />
                    </div>

                    <!-- Zoning Compatible -->
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Zoning Compatible</label>
                        <div class="d-flex gap-3">
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.ZoningCompatible" 
                                         Value="true" Name="zoning" Label="Yes" />
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.ZoningCompatible" 
                                         Value="false" Name="zoning" Label="No" />
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Notes</label>
                        <SfTextBox @bind-Value="Model.ZoningCompatibleNotes" CssClass="form-control" />
                    </div>

                    <!-- Setbacks -->
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Setbacks Observed</label>
                        <div class="d-flex gap-3">
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.SetbacksObserved" 
                                         Value="true" Name="setbacks" Label="Yes" />
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.SetbacksObserved" 
                                         Value="false" Name="setbacks" Label="No" />
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Notes</label>
                        <SfTextBox @bind-Value="Model.SetbacksObservedNotes" CssClass="form-control" />
                    </div>

                    <!-- Detailed Setbacks -->
                    <div class="col-12 mb-3">
                        <label class="form-label">Specific Setbacks</label>
                        <div class="row">
                            <div class="col-md-4">
                                <SfCheckBox @bind-Checked="Model.FrontSetback" Label="Front Setback" />
                            </div>
                            <div class="col-md-4">
                                <SfCheckBox @bind-Checked="Model.RearSetback" Label="Rear Setback" />
                            </div>
                            <div class="col-md-4">
                                <SfCheckBox @bind-Checked="Model.SideSetbacks" Label="Side Setbacks" />
                            </div>
                        </div>
                    </div>

                    <!-- Environmental Concerns -->
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Environmental Concerns</label>
                        <div class="d-flex gap-3">
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.EnvironmentalConcerns" 
                                         Value="true" Name="environmental" Label="Present" />
                            <SfRadioButton TChecked="bool?" @bind-Checked="Model.EnvironmentalConcerns" 
                                         Value="false" Name="environmental" Label="None" />
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Notes</label>
                        <SfTextBox @bind-Value="Model.EnvironmentalConcernsNotes" CssClass="form-control" />
                    </div>
                </div>

                <!-- Decision Support Section -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h6 class="text-primary mb-3">üìã Decision Support</h6>
                    </div>
                    
                    <div class="col-12 mb-3">
                        <label class="form-label">Required Modifications</label>
                        <SfTextBox @bind-Value="Model.RequiredModifications" Multiline="true" 
                                 CssClass="form-control" Placeholder="Describe any required modifications" />
                    </div>

                    <div class="col-md-6 mb-3">
                        <label class="form-label">Clearances Required</label>
                        <SfMultiSelect TValue="List<ClearanceType>" TItem="ClearanceTypeOption" 
                                     @bind-Value="Model.ClearancesRequired" DataSource="@ClearanceTypeOptions" 
                                     Placeholder="Select required clearances" CssClass="form-control"
                                     Mode="@VisualMode.CheckBox">
                            <MultiSelectFieldSettings Value="Value" Text="Text" />
                        </SfMultiSelect>
                    </div>

                    <div class="col-md-6 mb-3">
                        <label class="form-label">Final Recommendation <span class="text-danger">*</span></label>
                        <SfDropDownList TValue="FinalRecommendation" TItem="FinalRecommendationOption" 
                                      @bind-Value="Model.FinalRecommendation" DataSource="@FinalRecommendationOptions" 
                                      Placeholder="Select Recommendation" CssClass="form-control">
                            <DropDownListFieldSettings Value="Value" Text="Text" />
                        </SfDropDownList>
                        <ValidationMessage For="@(() => Model.FinalRecommendation)" />
                    </div>
                </div>
                                    <!-- DOCUMENT UPLOAD -->
                    <div class="card shadow-sm position-relative">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Document Upload</h5>
                        </div>
                        <div class="card-body">

                        @if (ApplicationId != Guid.Empty && ModuleId != Guid.Empty && DocumentCategory != Guid.Empty)
                                {
                                    <DocumentUploader Label="Upload Required Documents for Building Application (‡∂Ö‡∂∫‡∂Ø‡∑î‡∂∏‡∑ä‡∂¥‡∂≠ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ ‡∂Ω‡∑ö‡∂õ‡∂± ‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±)"
                                                      Required="true"
                                                      OnUploaded="OnPlanUploaded"
                                                      ModuleId="@ModuleId"
                                                      EntityId="@ApplicationId"
                                                      LinkContext="Building and Planning"
                                                      DocumentType="@MuniLK.Domain.Constants.LookupValues.DocumentTypes.BuildingAndPlanning.ToString()"
                                                      DocumentTypeId="@DocumentTypeId"
                                                      Enabled="true" />
                                }
                                else
                                {
                                    <p>Loading document uploader...</p>
                                }
                        </div>
                    </div>
                <!-- Documents Section -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h6 class="text-primary mb-3">üìÑ Application Documents</h6>
                        @if (ApplicationDocuments?.Any() == true)
                        {
                            <SfGrid TValue="DocumentLinkResponse" DataSource="@ApplicationDocuments" 
                                    AllowPaging="false" AllowSorting="true">
                                <GridColumns>
                                    <GridColumn Field="FileName" HeaderText="Document" Width="200" />
                                    <GridColumn Field="DocumentTypeName" HeaderText="Type" Width="120" />
                                    <GridColumn Field="UploadedDate" HeaderText="Date" Format="d" Width="100" />
                                    <GridColumn HeaderText="Actions" Width="120" TextAlign="TextAlign.Center">
                                        <Template Context="docContext">
                                            @{
                                                var doc = (docContext as DocumentLinkResponse);
                                            }
                                            <SfButton IconCss="fas fa-eye" CssClass="btn-sm btn-outline-primary me-1" 
                                                      @onclick="() => PreviewDocument(doc)" />
                                            <SfButton IconCss="fas fa-download" CssClass="btn-sm btn-outline-secondary" 
                                                      @onclick="() => DownloadDocument(doc)" />
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        }
                        else
                        {
                            <p class="text-muted">No documents available for this application.</p>
                        }
                    </div>
                </div>

                <!-- Submit Button -->
                <div class="row">
                    <div class="col-12">
                        <SfButton IsPrimary="true" type="submit" Disabled="@IsSubmitting" CssClass="me-2">
                            @(IsSubmitting ? "Submitting..." : "Submit Site Inspection")
                        </SfButton>
                        <SfButton type="button" OnClick="@(() => OnCancel.InvokeAsync())" Disabled="@IsSubmitting">Cancel</SfButton>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Document Preview Dialog -->
<SfDialog @bind-Visible="@IsPreviewDialogVisible" Width="1400px" Height="600px" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            <div>Document Preview - @(SelectedPreviewDocument?.FileName)</div>
        </Header>
        <Content>
            @if (SelectedPreviewDocument != null)
            {
                <div class="row">
                    <div class="col-8">
                        @if (IsImageFile(SelectedPreviewDocument.FileExtension))
                        {
                            <img src="@GetDocumentPreviewUrl(SelectedPreviewDocument.DocumentId)"
                                 class="img-fluid" alt="@SelectedPreviewDocument.FileName" />
                        }
                        else if (IsPdfFile(SelectedPreviewDocument.FileExtension))
                        {
                            <iframe src="@GetDocumentPreviewUrl(SelectedPreviewDocument.DocumentId)"
                                    width="100%" height="500px"></iframe>
                        }
                        else if (IsWordFile(SelectedPreviewDocument.FileExtension))
                        {
                            <iframe src="https://view.officeapps.live.com/op/embed.aspx?src=http://localhost:5164/api/Documents/@(SelectedPreviewDocument.DocumentId)/preview"
                                    width="100%" height="500px"></iframe>
                        }
                        else
                        {
                            <div class="text-center p-4">
                                <i class="fas fa-file fa-3x text-muted mb-3"></i>
                                <p>Preview not available for this file type.</p>
                                <SfButton @onclick="() => DownloadDocument(SelectedPreviewDocument)">
                                    <i class="fas fa-download me-2"></i>Download File
                                </SfButton>
                            </div>
                        }


                        @* @if (IsImageFile(SelectedPreviewDocument.FileExtension))
                        {
                            <img src="@GetDocumentPreviewUrl(SelectedPreviewDocument.DocumentId)" class="img-fluid" alt="@SelectedPreviewDocument.FileName" />
                        }
                        else if (IsPdfFile(SelectedPreviewDocument.FileExtension))
                        {
                            <iframe src="@GetDocumentPreviewUrl(SelectedPreviewDocument.DocumentId)" width="100%" height="500px"></iframe>
                        }
                        else
                        {
                            <div class="text-center p-4">
                                <i class="fas fa-file fa-3x text-muted mb-3"></i>
                                <p>Preview not available for this file type.</p>
                                <SfButton @onclick="() => DownloadDocument(SelectedPreviewDocument)">
                                    <i class="fas fa-download me-2"></i>Download File
                                </SfButton>
                            </div>
                        } *@
                    </div>
                    <div class="col-4">
                        <h6>Document Information</h6>
                        <table class="table table-sm">
                            <tr><td><strong>Filename:</strong></td><td>@SelectedPreviewDocument.FileName</td></tr>
                            <tr><td><strong>Type:</strong></td><td>@SelectedPreviewDocument.DocumentTypeName</td></tr>
                            <tr><td><strong>Size:</strong></td><td>@FormatFileSize(SelectedPreviewDocument.FileSize)</td></tr>
                            <tr><td><strong>Uploaded:</strong></td><td>@SelectedPreviewDocument.UploadedDate.ToString("dd/MM/yyyy")</td></tr>
                            <tr><td><strong>Uploaded By:</strong></td><td>@SelectedPreviewDocument.UploadedBy</td></tr>
                        </table>
                        <SfButton IsPrimary="true" @onclick="() => DownloadDocument(SelectedPreviewDocument)">
                            <i class="fas fa-download me-2"></i>Download
                        </SfButton>
                    </div>
                </div>
            }
        </Content>
    </DialogTemplates>
</SfDialog>

@code {
    [Parameter] public Guid ApplicationId { get; set; }
    [Parameter] public Guid DocumentTypeId { get; set; }
    [Parameter] public Guid DocumentCategory { get; set; }
    [Parameter] public Guid ModuleId { get; set; }
    [Parameter] public string? ApplicationNumber { get; set; }
    [Parameter] public EventCallback<SiteInspectionRequest> OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public DateTime? PrefilledInspectionDate { get; set; }
    [Parameter] public string? PrefilledOfficers { get; set; }
    [Parameter] public bool LockMetadata { get; set; } = false;
    [Parameter] public EventCallback OnInspectionCompleted { get; set; }
    // private bool CanUploadDocument => SelectedProperty != null && SelectedContact != null;
    private bool MetadataLocked => LockMetadata;

    private SiteInspectionRequest Model = new();
    private bool IsSubmitting = false;

    // Two-step process state
    private bool IsInspectionAssigned = false;
    private Guid? AssignmentId = null;

    // Assignment form fields
    private string? SelectedInspectorIdForAssignment = null;
    private DateTime AssignmentDate = DateTime.Today;
    private string? AssignmentNotes = null;

    // Document management variables
    private List<DocumentLinkResponse> ApplicationDocuments = new();
    private bool IsPreviewDialogVisible = false;
    private DocumentLinkResponse? SelectedPreviewDocument = null;
    private AlertToast? MyToast;

    // Inspector multi-select support
    private List<InspectorOption> InspectorOptions = new();
    private List<string> _selectedInspectorIds = new();
    private List<string> SelectedInspectorIds
    {
        get => _selectedInspectorIds;
        set
        {
            _selectedInspectorIds = value ?? new();
            var names = InspectorOptions.Where(o => _selectedInspectorIds.Contains(o.Id)).Select(o => o.Name);
            Model.OfficersPresent = string.Join(", ", names);
        }
    }

    private List<InspectionStatusOption> InspectionStatusOptions = new()
    {
        new() { Value = InspectionStatus.Pending, Text = "Pending" },
        new() { Value = InspectionStatus.Approve, Text = "Approve" },
        new() { Value = InspectionStatus.Reject, Text = "Reject" },
        new() { Value = InspectionStatus.ReInspectionRequired, Text = "Re-Inspection Required" }
    };

    private List<FinalRecommendationOption> FinalRecommendationOptions = new()
    {
        new() { Value = FinalRecommendation.ApproveAsSubmitted, Text = "Approve As Submitted" },
        new() { Value = FinalRecommendation.ApproveWithModifications, Text = "Approve With Modifications" },
        new() { Value = FinalRecommendation.Reject, Text = "Reject" },
        new() { Value = FinalRecommendation.ReInspectionRequired, Text = "Re-Inspection Required" }
    };

    private List<ClearanceTypeOption> ClearanceTypeOptions = new()
    {
        new() { Value = ClearanceType.CEA, Text = "CEA" },
        new() { Value = ClearanceType.CoastConservation, Text = "Coast Conservation" },
        new() { Value = ClearanceType.NBRO, Text = "NBRO" },
        new() { Value = ClearanceType.FireDept, Text = "Fire Department" },
        new() { Value = ClearanceType.Other, Text = "Other" }
    };

    protected override async Task OnInitializedAsync()
    {
        Model.ApplicationId = ApplicationId;
        Model.InspectionDate = PrefilledInspectionDate ?? DateTime.Today;
        if (!string.IsNullOrWhiteSpace(PrefilledOfficers))
        {
            Model.OfficersPresent = PrefilledOfficers;
        }
        Model.Status = InspectionStatus.Pending;
        Model.FinalRecommendation = FinalRecommendation.ApproveAsSubmitted;
        Model.ClearancesRequired = new List<ClearanceType>();
        await LoadInspectorsAsync();
        await LoadExistingApplicationAsync(ApplicationId);
        await CheckExistingAssignment();
    }

    private async Task CheckExistingAssignment()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");

            // Get module ID for Building and Planning

            // Check if there's an existing assignment for this application
            var response = await client.GetAsync($"api/Assignment?moduleId={ModuleId}&entityId={ApplicationId}");
            if (response.IsSuccessStatusCode)
            {
                var jsonContent = await response.Content.ReadAsStringAsync();
                var assignments = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.List<AssignmentDto>>(jsonContent, 
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (assignments?.Any() == true)
                {
                    // If an assignment exists, move to completion step
                    var assignment = assignments.First();
                    AssignmentId = assignment.Id;
                    IsInspectionAssigned = true;
                }
            }
        }
        catch
        {
            // If checking fails, default to assignment step
            IsInspectionAssigned = false;
        }
    }

    private class AssignmentDto
    {
        public Guid Id { get; set; }
        public Guid AssignedToUserId { get; set; }
        public DateTime AssignmentDate { get; set; }
        public string? Status { get; set; }
    }

    private async Task LoadInspectorsAsync()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            var jsonContent = await client.GetStringAsync("api/Roles/GetUsersByTenantAndRole?roleName=Inspector");
            var list = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.List<InspectorDto>>(jsonContent,
                new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            InspectorOptions = list?.Select(x => new InspectorOption { Id = x.Id.ToString(), Name = x.FullName })?.ToList() ?? new();
        }
        catch
        {
            InspectorOptions = new();
        }
    }

    private async Task HandleValidSubmit()
    {
        IsSubmitting = true;
        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            var url = $"api/BuildingPlans/{ApplicationId}/complete-site-inspection";
            var resp = await client.PostAsJsonAsync(url, Model);
            if (resp.IsSuccessStatusCode)
            {
                if (OnSubmit.HasDelegate)
                {
                    await OnSubmit.InvokeAsync(Model);
                }
                if (OnInspectionCompleted.HasDelegate)
                    await OnInspectionCompleted.InvokeAsync();

                await JS.InvokeVoidAsync("console.log", "Site inspection submitted successfully");
            }
            else
            {
                var error = await resp.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("console.error", $"Failed to submit site inspection: {error}");
            }
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private async Task LoadExistingApplicationAsync(Guid applicationId)
    {
        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");

            // Get the Building and Planning module ID


            // Load existing site inspection if exists
            try
            {
                var jsonInsp = await client.GetStringAsync($"api/Inspection/{applicationId}");
                var existingInspection = System.Text.Json.JsonSerializer.Deserialize<SiteInspectionResponse>(jsonInsp,
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                if (existingInspection != null)
                {
                    PopulateFormFromExistingInspection(existingInspection);
                }
            }
            catch
            {
                // No existing inspection found, continue with empty form
            }

            // Load documents
            if (ModuleId != Guid.Empty)
            {
                var jsonDocs = await client.GetStringAsync(
                    $"api/Documents/linked?moduleId={ModuleId}&entityId={applicationId}&linkContext=Building and Planning");
                var documents = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.List<DocumentLinkResponse>>(jsonDocs,
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                ApplicationDocuments = documents ?? new System.Collections.Generic.List<DocumentLinkResponse>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading existing application: {ex.Message}");
            ApplicationDocuments = new List<DocumentLinkResponse>();
        }
    }

    private void PopulateFormFromExistingInspection(SiteInspectionResponse inspection)
    {
        Model.Status = inspection.Status;
        Model.InspectionDate = inspection.InspectionDate;
        Model.OfficersPresent = inspection.OfficersPresent ?? string.Empty;
        Model.GpsCoordinates = inspection.GpsCoordinates ?? string.Empty;
        Model.Remarks = inspection.Remarks ?? string.Empty;

        // Site conditions - need to map from SiteConditionResult list
        var siteConditions = inspection.SiteConditions ?? new List<SiteConditionResult>();
        var accessRoad = siteConditions.FirstOrDefault(sc => sc.Name == "AccessRoadWidth");
        Model.AccessRoadWidthCondition = accessRoad?.Result;
        Model.AccessRoadWidthNotes = accessRoad?.Notes ?? string.Empty;

        var boundary = siteConditions.FirstOrDefault(sc => sc.Name == "BoundaryVerification");
        Model.BoundaryVerification = boundary?.Result;
        Model.BoundaryVerificationNotes = boundary?.Notes ?? string.Empty;

        var topography = siteConditions.FirstOrDefault(sc => sc.Name == "Topography");
        Model.Topography = topography?.Result;
        Model.TopographyNotes = topography?.Notes ?? string.Empty;

        var structures = siteConditions.FirstOrDefault(sc => sc.Name == "ExistingStructures");
        Model.ExistingStructures = structures?.Result;
        Model.ExistingStructuresNotes = structures?.Notes ?? string.Empty;

        var encroachments = siteConditions.FirstOrDefault(sc => sc.Name == "Encroachments");
        Model.EncroachmentsReservations = encroachments?.Result;
        Model.EncroachmentsReservationsNotes = encroachments?.Notes ?? string.Empty;

        // Compliance checks - need to map from ComplianceCheckResult list
        var complianceChecks = inspection.ComplianceChecks ?? new List<ComplianceCheckResult>();
        var surveyPlan = complianceChecks.FirstOrDefault(cc => cc.Name == "MatchesSurveyPlan");
        Model.MatchesSurveyPlan = surveyPlan?.Result;
        Model.MatchesSurveyPlanNotes = surveyPlan?.Notes ?? string.Empty;

        var zoning = complianceChecks.FirstOrDefault(cc => cc.Name == "ZoningCompatible");
        Model.ZoningCompatible = zoning?.Result;
        Model.ZoningCompatibleNotes = zoning?.Notes ?? string.Empty;

        var setbacks = complianceChecks.FirstOrDefault(cc => cc.Name == "SetbacksObserved");
        Model.SetbacksObserved = setbacks?.Result;
        Model.SetbacksObservedNotes = setbacks?.Notes ?? string.Empty;

        var frontSetback = complianceChecks.FirstOrDefault(cc => cc.Name == "FrontSetback");
        Model.FrontSetback = frontSetback?.Result ?? false;

        var rearSetback = complianceChecks.FirstOrDefault(cc => cc.Name == "RearSetback");
        Model.RearSetback = rearSetback?.Result ?? false;

        var sideSetbacks = complianceChecks.FirstOrDefault(cc => cc.Name == "SideSetbacks");
        Model.SideSetbacks = sideSetbacks?.Result ?? false;

        var environmental = complianceChecks.FirstOrDefault(cc => cc.Name == "EnvironmentalConcerns");
        Model.EnvironmentalConcerns = environmental?.Result;
        Model.EnvironmentalConcernsNotes = environmental?.Notes ?? string.Empty;

        // Decision support
        Model.RequiredModifications = inspection.RequiredModifications ?? string.Empty;
        Model.ClearancesRequired = inspection.ClearancesRequired ?? new List<ClearanceType>();
        Model.FinalRecommendation = inspection.FinalRecommendation;
    }

    // Document management methods
    private void PreviewDocument(DocumentLinkResponse document)
    {
        SelectedPreviewDocument = document;
        IsPreviewDialogVisible = true;
    }

    private async Task DownloadDocument(DocumentLinkResponse document)
    {
        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            var downloadUrl = $"api/Documents/{document.DocumentId}/download";

            using var response = await client.GetAsync(downloadUrl, HttpCompletionOption.ResponseHeadersRead);
            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Download failed: {response.StatusCode}");
                return;
            }

            var stream = await response.Content.ReadAsStreamAsync();

            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            ms.Position = 0;
            var base64 = Convert.ToBase64String(ms.ToArray());

            // call JS to trigger browser download
            await JS.InvokeVoidAsync("downloadBase64File", document.FileName, base64);
            // Open download in new tab
            //await JS.InvokeVoidAsync("downloadFile", downloadUrl, document.FileName);

            //await JS.InvokeVoidAsync("open", downloadUrl, "_blank");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading document: {ex.Message}");
        }
    }

    private string GetDocumentPreviewUrl(Guid documentId)
    {
        var client = HttpClientFactory.CreateClient("AuthorizedClient");
        var apiBaseUrl = "http://localhost:5164/"; // move this to config/appsettings
        return $"{apiBaseUrl}api/Documents/{documentId}/preview";
        //return $"api/Documents/{documentId}/preview";
    }

    private bool IsImageFile(string extension)
    {
        var imageExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" };
        return imageExtensions.Contains(extension.ToLowerInvariant());
    }

    private bool IsPdfFile(string extension)
    {
        return extension.ToLowerInvariant() == ".pdf";
    }
    private bool IsWordFile(string extension)
    {
        var docExtensions = new[] { ".doc", ".docx", ".csv", ".xlsx" };
        return docExtensions.Contains(extension.ToLowerInvariant());
    }
    private string FormatFileSize(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB" };
        int counter = 0;
        decimal number = bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number = number / 1024;
            counter++;
        }
        return $"{number:n1} {suffixes[counter]}";
    }
    private async Task OnPlanUploaded(string fileName)
    {
        //if (!string.IsNullOrWhiteSpace(fileName)) ;
        // await MyToast.ShowToastAsync("Document Sucessfully Uploaded", AlertToast.ToastType.Success);

    }
    public class InspectionStatusOption
    {
        public InspectionStatus Value { get; set; }
        public string Text { get; set; } = "";
    }

    public class FinalRecommendationOption
    {
        public FinalRecommendation Value { get; set; }
        public string Text { get; set; } = "";
    }

    public class ClearanceTypeOption
    {
        public ClearanceType Value { get; set; }
        public string Text { get; set; } = "";
    }

    private class InspectorOption
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }

    private class InspectorDto
    {
        public Guid Id { get; set; }
        public string FullName { get; set; } = string.Empty;
    }
}