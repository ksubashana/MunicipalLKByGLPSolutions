@page "/buildingplan/submit"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@using MediatR
@using MuniLK.Application.BuildingAndPlanning.Commands
@using MuniLK.Application.BuildingAndPlanning.DTOs
@using MuniLK.Application.BuildingAndPlanning.Queries
@using MuniLK.Application.Contact.DTOs
@using MuniLK.Application.Documents.DTOs
@using MuniLK.Application.Generic.Interfaces
@using MuniLK.Application.PropertiesLK.DTOs
@using MuniLK.Application.PropertyOwners.DTOs
@using MuniLK.Domain.Constants
@using MuniLK.Domain.Constants.Flows
@using MuniLK.Web.Clients
@using MuniLK.Web.Components.Pages.Flows
@using MuniLK.Web.Components.Pages.Generic
@using MuniLK.Web.Components.Pages.Generic.Documents
@using MuniLK.Web.Components.Pages.Notifications
@using MuniLK.Web.Components.Pages.Pages.Inspections
@using MuniLK.Web.Interfaces
@using MuniLK.Web.Pages
@using MuniLK.Web.Services
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups 
@using System.Net.Http.Json
@using MuniLK.Application.BuildingAndPlanning.Mappings
@inject IHttpClientFactory HttpClientFactory
@inject ILookupService LookupService
@inject IModuleService ModuleService
@inject IJSRuntime JS
@inject IPermissionService PermissionService
@inject DocumentClient DocClient

<style>
    .global-spinner-overlay { position: fixed; inset: 0; display: flex; align-items: center; justify-content: center; backdrop-filter: blur(6px); background: rgba(255,255,255,0.45); z-index: 3000; opacity: 0; pointer-events: none; transition: opacity .2s ease; }
    .global-spinner-overlay.show { opacity: 1; pointer-events: all; }
    body.loading { overflow: hidden; }
</style>

<AuthorizeView>
    <Authorized>
        <div class="global-spinner-overlay @(VisibleProperty ? "show" : "")">
            <div><SfSpinner Visible="true"></SfSpinner></div>
        </div>

        @if (!VisibleProperty)
        {
            <StepHeader Title="Submit Building Plan" FeatureId="@(GeneratedFeatureId ?? string.Empty)" HelperText="Save this number for future tracking." />
            <div class="d-flex justify-content-end mb-2">
                <SfButton CssClass="btn btn-outline-info btn-sm" Disabled="@(EntityId==Guid.Empty || !IsApplicationCreated)" @onclick="ShowHistoryAsync">
                    <i class="fas fa-history me-1"></i>Workflow History
                </SfButton>
            </div>
            <div class="container-xxl">
                <StepperFlow Steps="@buildingSteps" CurrentStep="@CurrentStep" Linear="true" CssClass="mb-4" />
                @switch (CurrentStep)
                {
                    case 0:
                        <div class="container-xxl py-3">
                            <h4 class="mb-3">Application – Link Property & Applicant</h4>
                            <p class="text-muted mb-4">Choose whether to <strong>Search</strong> or <strong>Create</strong> a Property and an Applicant. Once both are selected, you can upload the Building Plan.</p>
                            <!-- PROPERTY SECTION -->
                            <div class="card shadow-sm mb-4">
                                <div class="card-header bg-light">
                                    <div class="d-flex align-items-center justify-content-between">
                                        <h5 class="mb-0">Property</h5>
                                        @if (SelectedProperty is not null) { <span class="badge bg-success">Selected</span>; } else { <span class="badge bg-secondary">Not selected</span>; }
                                    </div>
                                </div>
                                <div class="card-body">
                                    <!-- Tabs: Search | Create -->
                                    <ul class="nav nav-tabs" id="propertyTabs" role="tablist">
                                        <li class="nav-item" role="presentation">
                                            <button class="nav-link @(PropertyMode == "search" ? "active" : "")" @onclick="SetPropertySearchMode" type="button" role="tab">Search</button>
                                        </li>
                                        <li class="nav-item" role="presentation">
                                            <button class="nav-link @(PropertyMode == "create" ? "active" : "")" @onclick="SetPropertyCreateMode" type="button" role="tab">Create New</button>
                                        </li>
                                    </ul>

                                    <div class="tab-content pt-3">
                                        <div class="tab-pane fade @(PropertyMode == "search" ? "show active" : "")" role="tabpanel">
                                            <div class="mb-3">
                                                <label class="form-label">Find an existing property</label>
                                                <MuniLK.Web.Components.Pages.Generic.Property.PropertySearch Placeholder="Search by address, deed no., or ID..." SelectedPropertyChanged="OnPropertySelected" CreatePropertyRequested="SetPropertyCreateMode" />
                                                <div class="form-text">Tip: Press Enter to search. You can switch to <em>Create New</em> anytime.</div>
                                            </div>
                                        </div>

                                        <div class="tab-pane fade @(PropertyMode == "create" ? "show active" : "")" role="tabpanel">
                                            <label class="form-label">Create a new property</label>
                                            <MuniLK.Web.Components.Pages.Generic.Property.PropertyCreate RenderAsPopup=false IsVisible="true" IsVisibleChanged="OnDialogVisibilityChanged" OnPropertyCreated="OnPropertyCreated" />
                                        </div>
                                    </div>

                                    @if (SelectedProperty != null)
                                    {
                                        <hr />
                                        <div class="row g-3">
                                            <div class="col-lg-4">
                                                <h6 class="mb-2">Property Information</h6>
                                                <ul class="list-group list-group-flush better-list">
                                                    <li class="list-group-item px-0"><span class="label">Property ID</span><span class="value">@SelectedProperty.PropertyId</span></li>
                                                    <li class="list-group-item px-0"><span class="label">Address</span><span class="value">@SelectedProperty.Address</span></li>
                                                    <li class="list-group-item px-0"><span class="label">Title Deed No.</span><span class="value">@SelectedProperty.TitleDeedNumber</span></li>
                                                    <li class="list-group-item px-0"><span class="label">Assessment Value</span><span class="value">@SelectedProperty.AssessmentValue</span></li>
                                                    <li class="list-group-item px-0"><span class="label">Commercial Use</span><span class="value">@(SelectedProperty.IsCommercialUse ? "Yes" : "No")</span></li>
                                                </ul>
                                            </div>

                                            <div class="col-lg-8">
                                                <h6 class="mb-2">Linked Owners</h6>
                                                <SfGrid DataSource="@OwnerList" AllowPaging="true" RowSelected="OnOwnerSelected">
                                                    <GridEvents OnRecordClick="RecordClickHandler" TValue="PropertyOwnerResponse"></GridEvents>
                                                    <GridColumns>
                                                        <GridColumn Field="FullName" HeaderText="Full Name" Width="150" />
                                                        <GridColumn Field="NIC" HeaderText="NIC" Width="120" />
                                                        <GridColumn Field="Email" HeaderText="Email" Width="180" />
                                                        <GridColumn Field="Phone" HeaderText="Phone" Width="130" />
                                                        <GridColumn Field="OwnershipType" HeaderText="Ownership Type" Width="150" />
                                                    </GridColumns>
                                                </SfGrid>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="alert alert-info mt-3 mb-0">No property selected yet. Use <strong>Search</strong> or <strong>Create New</strong> above.</div>
                                    }
                                </div>
                            </div>

                            <!-- CONTACT SECTION (ONLY VISIBLE AFTER PROPERTY SELECTED) -->
                            @if (SelectedProperty != null)
                            {
                                <div class="card shadow-sm mb-4">
                                    <div class="card-header bg-light">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <h5 class="mb-0">Applicant (Contact)</h5>
                                            @if (SelectedContact is not null) { <span class="badge bg-success">Selected</span>; } else { <span class="badge bg-secondary">Not selected</span>; }
                                        </div>
                                    </div>
                                    <div class="card-body">

                                        <!-- Tabs: Search | Create -->
                                        <ul class="nav nav-tabs" id="contactTabs" role="tablist">
                                            <li class="nav-item" role="presentation"><button class="nav-link @(ContactMode == "search" ? "active" : "")" @onclick="SetContactSearchMode" type="button" role="tab">Search</button></li>
                                            <li class="nav-item" role="presentation"><button class="nav-link @(ContactMode == "create" ? "active" : "")" @onclick="SetContactCreateMode" type="button" role="tab">Create New</button></li>
                                        </ul>

                                        <div class="tab-content pt-3">
                                            <div class="tab-pane fade @(ContactMode == "search" ? "show active" : "")" role="tabpanel">
                                                <div class="mb-3">
                                                    <label class="form-label">Find an existing applicant</label>
                                                    <MuniLK.Web.Components.Pages.Generic.Contacts.ContactSearch Placeholder="Search by name, NIC, email or phone..." SelectedContactChanged="OnContactSelected" CreateContactRequested="SetContactCreateMode" />
                                                    <div class="form-text">Switch to <em>Create New</em> if the applicant doesn’t exist.</div>
                                                </div>
                                            </div>

                                            <div class="tab-pane fade @(ContactMode == "create" ? "show active" : "")" role="tabpanel">
                                                <label class="form-label">Create a new applicant</label>
                                                <MuniLK.Web.Components.Pages.Generic.Contacts.ContactCreate RenderAsPopup="false" OnContactCreated="OnContactCreated" />
                                            </div>
                                        </div>

                                        @if (SelectedContact != null)
                                        {
                                            <hr />
                                            <div class="row g-3">
                                                <div class="col-lg-6">
                                                    <h6 class="mb-2">Contact Information</h6>
                                                    <ul class="list-group list-group-flush better-list">
                                                        <li class="list-group-item px-0"><span class="label">Full Name</span><span class="value">@SelectedContact.FullName</span></li>
                                                        <li class="list-group-item px-0"><span class="label">Address</span><span class="value">@SelectedContact.Address</span></li>
                                                        <li class="list-group-item px-0"><span class="label">National ID</span><span class="value">@SelectedContact.NationalId</span></li>
                                                        <li class="list-group-item px-0"><span class="label">Email</span><span class="value">@SelectedContact.Email</span></li>
                                                        <li class="list-group-item px-0"><span class="label">Phone</span><span class="value">@SelectedContact.PhoneNumber</span></li>
                                                    </ul>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-info mt-3 mb-0">No applicant selected yet. Use <strong>Search</strong> or <strong>Create New</strong> above.</div>
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-warning mt-3 mb-0">Please select a Property before selecting a Contact.</div>
                            }

                            <!-- DOCUMENT UPLOAD -->
                            <div class="card shadow-sm position-relative">
                                <div class="card-header bg-light"><h5 class="mb-0">Document Upload</h5></div>
                                <div class="card-body">
                                    <div class="uploader-wrapper @(CanUploadDocument ? "" : "disabled")">
                                        @if (EntityId != Guid.Empty && ModuleId != Guid.Empty && DocumentCategory != Guid.Empty)
                                        {
                                            <DocumentUploader Label="Upload Required Documents for Building Application (අයදුම්පත සඳහා අවශ්‍ය ලේඛන උඩුගත කරන්න)" Required="true" OnUploaded="OnPlanUploaded" ModuleId="@ModuleId" EntityId="@EntityId" LinkContext="@MuniLK.Domain.Constants.LookupValues.DocumentTypes.BuildingAndPlanning.ToString()" DocumentType="@MuniLK.Domain.Constants.LookupValues.DocumentTypes.BuildingAndPlanning.ToString()" DocumentTypeId="@DocumentTypeId" Enabled="@CanUploadDocument" />
                                        }
                                        else { <p>Loading document uploader...</p>; }
                                    </div>
                                    @if (!CanUploadDocument) { <div class="text-danger mt-2">Please select both a Property and an Applicant first.</div>; }
                                </div>
                            </div>

                            <!-- Documents Section -->
                            <div class="row mb-4">
                                <div class="col-12">
                                    <h6 class="text-primary mb-3">📄 Application Documents</h6>
                                    @if (ApplicationDocuments?.Any() == true)
                                    {
                                        <SfGrid TValue="DocumentLinkResponse" DataSource="@ApplicationDocuments" AllowPaging="false" AllowSorting="true">
                                            <GridColumns>
                                                <GridColumn Field="FileName" HeaderText="Document" Width="200" />
                                                <GridColumn Field="DocumentTypeName" HeaderText="Type" Width="120" />
                                                <GridColumn Field="UploadedDate" HeaderText="Date" Format="d" Width="100" />
                                                <GridColumn HeaderText="Actions" Width="120" TextAlign="TextAlign.Center">
                                                    <Template Context="docContext">
                                                        @{ var doc = (docContext as DocumentLinkResponse); }
                                                        <SfButton IconCss="fas fa-eye" CssClass="btn-sm btn-outline-primary me-1" @onclick="() => PreviewDocument(doc)" />
                                                        <SfButton IconCss="fas fa-download" CssClass="btn-sm btn-outline-secondary" @onclick="() => DownloadDocument(doc)" />
                                                    </Template>
                                                </GridColumn>
                                            </GridColumns>
                                        </SfGrid>
                                    }
                                    else { <p class="text-muted">No documents available for this application.</p>; }
                                </div>
                            </div>

                            <!-- Document Preview Dialog -->
                            <SfDialog @bind-Visible="@IsPreviewDialogVisible" Width="1400px" Height="600px" ShowCloseIcon="true">
                                <DialogTemplates>
                                    <Header><div>Document Preview - @(SelectedPreviewDocument?.FileName)</div></Header>
                                    <Content>
                                        @if (SelectedPreviewDocument != null)
                                        {
                                            <div class="row">
                                                <div class="col-8">
                                                    @if (@DocClient.IsImageFile(SelectedPreviewDocument.FileExtension)) { <img src="@DocClient.GetDocumentPreviewUrl(SelectedPreviewDocument.DocumentId)" class="img-fluid" alt="@SelectedPreviewDocument.FileName" /> }
                                                    else if (@DocClient.IsPdfFile(SelectedPreviewDocument.FileExtension)) { <iframe src="@DocClient.GetDocumentPreviewUrl(SelectedPreviewDocument.DocumentId)" width="100%" height="500px"></iframe> }
                                                    else if (@DocClient.IsWordFile(SelectedPreviewDocument.FileExtension)) { <iframe src="https://view.officeapps.live.com/op/embed.aspx?src=http://localhost:5164/api/Documents/@(SelectedPreviewDocument.DocumentId)/preview" width="100%" height="500px"></iframe> }
                                                    else {
                                                        <div class="text-center p-4">
                                                            <i class="fas fa-file fa-3x text-muted mb-3"></i>
                                                            <p>Preview not available for this file type.</p>
                                                            <SfButton @onclick="() => DownloadDocument(SelectedPreviewDocument)"><i class="fas fa-download me-2"></i>Download File</SfButton>
                                                        </div>
                                                    }
                                                </div>
                                                <div class="col-4">
                                                    <h6>Document Information</h6>
                                                    <table class="table table-sm">
                                                        <tr><td><strong>Filename:</strong></td><td>@SelectedPreviewDocument.FileName</td></tr>
                                                        <tr><td><strong>Type:</strong></td><td>@SelectedPreviewDocument.DocumentTypeName</td></tr>
                                                        <tr><td><strong>Size:</strong></td><td>@DocClient.FormatFileSize(SelectedPreviewDocument.FileSize)</td></tr>
                                                        <tr><td><strong>Uploaded:</strong></td><td>@SelectedPreviewDocument.UploadedDate.ToString("dd/MM/yyyy")</td></tr>
                                                        <tr><td><strong>Uploaded By:</strong></td><td>@SelectedPreviewDocument.UploadedBy</td></tr>
                                                    </table>
                                                    <SfButton IsPrimary="true" @onclick="() => DownloadDocument(SelectedPreviewDocument)"><i class="fas fa-download me-2"></i>Download</SfButton>
                                                </div>
                                            </div>
                                        }
                                    </Content>
                                </DialogTemplates>
                            </SfDialog>

                            <!-- Application Details - New UI Block -->
                            <div class="card shadow-sm mb-4">
                                <div class="card-header bg-light"><h5 class="mb-0">Application Details</h5></div>
                                <div class="card-body">
                                    <div class="row g-3">
                                        <div class="col-md-6"><label class="form-label">Building Purpose</label><InputText class="form-control" @bind-Value="BuildingPurposeInput" placeholder="Residential / Commercial / Mixed..." /></div>
                                        <div class="col-md-6"><label class="form-label">Number of Floors</label><InputNumber class="form-control" @bind-Value="NoOfFloorsInput" Min="1" /></div>
                                        <div class="col-md-6"><label class="form-label">Architect Name</label><InputText class="form-control" @bind-Value="ArchitectNameInput" /></div>
                                        <div class="col-md-6"><label class="form-label">Engineer Name</label><InputText class="form-control" @bind-Value="EngineerNameInput" /></div>
                                        <div class="col-12"><label class="form-label">Remarks</label><InputTextArea class="form-control" @bind-Value="RemarksInput" /></div>
                                    </div>
                                    <div class="mt-3">
                                        @if (HasSubmitPermission)
                                        {
                                            <button class="btn btn-success" disabled="@(IsApplicationCreated || !CanSubmitApplication)" @onclick="SubmitBuildingPlanAsync">@(IsApplicationCreated ? "Submitted" : "Submit Application")</button>
                                            @if (!IsDocumentUploaded) { <span class="text-muted ms-2">Upload the Building Plan PDF to enable submission.</span>; }
                                        }
                                        else { <div class="alert alert-warning mb-0">You do not have permission to submit the application.</div>; }
                                    </div>
                                </div>
                            </div>
                        </div>
                        break;
                    case 1:
                        <MuniLK.Web.Components.Pages.Pages.Inspections.AssignInspector ModuleId="ModuleId" EntityId="EntityId" PrefetchedAssignment="BuildingPlanSummery?.Assignment" OnAssigned="OnAssignmentScheduled" />
                        break;
                    case 2:
                        <MuniLK.Web.Components.Pages.Pages.Inspections.SiteInspectionForm ApplicationId="EntityId" AssignmentId="ActiveAssignmentId" ApplicationNumber="GeneratedFeatureId" DocumentCategory="DocumentCategory" DocumentTypeId="DocumentTypeId" ModuleId="ModuleId" PrefilledInspectionDate="ActiveAssignmentDate" PrefilledAssignedTo="@ActiveInspectorName" PropertyAddress="@SelectedProperty?.Address" LockMetadata="@true" OnSubmit="OnSiteInspectionSubmitted" />
                        break;
                    case 3:
                        <MuniLK.Web.Components.Pages.Pages.BuildingAndPlanning.PlanningCommitteeReview Model="BuildingPlanSummery" />

                        @* <MuniLK.Web.Components.Pages.Pages.BuildingAndPlanning.EngineerReview Model="BuildingPlanSummery" /> *@
                        break;
                    case 4:
                        <MuniLK.Web.Components.Pages.Pages.BuildingAndPlanning.CommissionerApproval />
                        break;
                    case 5:
                    
                        break;
                }
                <div class="container-xxl py-3">
                    <div class="card shadow-sm position-relative">
                        <div class="card-header bg-light"><h5 class="mb-0">Go to the Next Step</h5></div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-lg-12">
                                    <div class="d-flex justify-content-between mt-3">
                                        @if (CurrentStep > 0) { <button class="btn btn-secondary" @onclick="MoveToPreviousStep">Back</button>; }
                                        @if (CurrentStep < buildingSteps.Count - 1) { <button class="btn btn-primary" @onclick="MoveToNextStep">Next</button>; }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <button class="btn btn-primary" @onclick="MoveToNextStep2">Next</button>

            <!-- Workflow History Dialog -->
            <SfDialog @bind-Visible="IsHistoryDialogVisible" Width="90%" IsModal="true" CssClass="workflow-history-dialog" ShowCloseIcon="true">
                <DialogTemplates>
                    <Header>
                        <div class="d-flex justify-content-between align-items-center w-100">
                            <span class="fw-bold">Workflow History - @GeneratedFeatureId</span>
                            <div class="d-flex align-items-center gap-2">
                                <SfButton CssClass="btn btn-sm btn-outline-secondary" @onclick="RefreshHistoryAsync"><i class="fas fa-sync me-1"></i>Refresh</SfButton>
                                <SfButton CssClass="btn btn-sm btn-outline-danger" @onclick="() => IsHistoryDialogVisible = false"><i class="fas fa-times me-1"></i>Close</SfButton>
                            </div>
                        </div>
                    </Header>
                    <Content>
                        <div class="workflow-history-content">
                            @if (IsHistoryLoading)
                            {
                                <div class="p-4 text-center"><SfSpinner Visible="true" /></div>
                            }
                            else if (HistoryLogs.Count == 0)
                            {
                                <div class="p-5 text-center text-muted"><i class="fas fa-clock fa-2x mb-2"></i><p>No workflow entries yet.</p></div>
                            }
                            else
                            {
                                <WorkflowHistory WorkflowLogs="HistoryLogs" />
                            }
                        </div>
                    </Content>
                </DialogTemplates>
            </SfDialog>

            <hr />
        }
    </Authorized>
    <NotAuthorized><RedirectToLogin/></NotAuthorized>
</AuthorizeView>


@code {
    private bool VisibleProperty { get; set; } = false;
    private const string LocalStorageFeatureKey = "bp.featureId";
    [Parameter][SupplyParameterFromQuery(Name = "id")] public Guid? QueryApplicationId { get; set; } 

    // Loading state flag
    private bool IsPageLoading { get; set; } = true;

    private bool IsContactDialogVisible = false;
    private BuildingPlanApplicationDto BuildingPlanSummery;
    private BuildingPlanWorkflowSnapshot? WorkflowSnapshot;
    private ContactResponse? SelectedContact;
    private PropertyResponse? SelectedProperty;
    private List<PropertyOwnerResponse> OwnerList = new();
    private int CurrentStep = 0;
    private List<string> buildingSteps = EnumHelper.GetDisplayNames<BuildingAndPlanSteps>();
    private Guid DocumentCategory;
    private Guid DocumentTypeId;
    private Guid ModuleId;
    private Guid EntityId;
    private bool CanUploadDocument => SelectedProperty != null && SelectedContact != null;
    private string PropertyMode { get; set; } = "search";
    private string ContactMode { get; set; } = "search";
    private List<DocumentLinkResponse> ApplicationDocuments = new();
    private DocumentLinkResponse? SelectedPreviewDocument = null;
    private bool IsPreviewDialogVisible = false;

    private Guid? ActiveAssignmentId;
    private DateTime? ActiveAssignmentDate;
    private string? ActiveInspectorName;
    private Guid? ActiveInspectorUserId;

    private string? GeneratedFeatureId;
    private bool IsDocumentUploaded { get; set; } = false;
    private bool HasSubmitPermission;

    private string? BuildingPurposeInput { get; set; }
    private int? NoOfFloorsInput { get; set; }
    private string? ArchitectNameInput { get; set; }
    private string? EngineerNameInput { get; set; }
    private string? RemarksInput { get; set; }

    private bool IsApplicationCreated { get; set; } = false;

    void SetPropertySearchMode() => PropertyMode = "search";
    void SetPropertyCreateMode() => PropertyMode = "create";
    void SetContactSearchMode() => ContactMode = "search";
    void SetContactCreateMode() => ContactMode = "create";

    protected override async Task OnInitializedAsync()
    {
        VisibleProperty = true;

        try
        {
            DocumentCategory = await LookupService.GetLookupCategoryIdAsync(LookupCategoryNames.DocumentType.ToString());
            DocumentTypeId = await LookupService.GetLookupIdAsync(DocumentCategory, Domain.Constants.LookupValues.DocumentTypes.BuildingAndPlanning.ToString());
            ModuleId = await ModuleService.GetModuleIdByCodeAsync(ModuleNames.BLD_PLAN.ToString());
            HasSubmitPermission = await PermissionService.CanSubmitBuildingPlanAsync();

            if (QueryApplicationId.HasValue)
            {
                await LoadExistingApplicationAsync(QueryApplicationId.Value);
                await RefreshWorkflowSnapshotAsync();
            }
            else
            {
                // New application scenario – fully reset state
                await JS.InvokeVoidAsync("localStorage.removeItem", LocalStorageFeatureKey);
                EntityId = Guid.NewGuid();
                CurrentStep = 0;
            }
        }
        finally
        {
            VisibleProperty = false; 
            StateHasChanged();
        }
    }

    private bool CanSubmitApplication =>
        HasSubmitPermission &&
        IsDocumentUploaded &&
        SelectedProperty?.Id is not null &&
        SelectedContact?.Id is not null &&
        !string.IsNullOrWhiteSpace(BuildingPurposeInput) &&
        (NoOfFloorsInput ?? 0) > 0;

    private async Task SubmitBuildingPlanAsync()
    {
        if (!CanSubmitApplication) return;

        var client = HttpClientFactory.CreateClient("AuthorizedClient");

        var request = new SubmitBuildingPlanRequest
        {
            ApplicationId = EntityId,
            ModuleId = ModuleId,
            ApplicantContactId = SelectedContact!.Id!.Value,
            PropertyId = SelectedProperty!.Id!.Value,
            BuildingPurpose = BuildingPurposeInput!,
            NoOfFloors = NoOfFloorsInput!.Value,
            ArchitectName = ArchitectNameInput,
            EngineerName = EngineerNameInput,
            Remarks = RemarksInput
        };

        var resp = await client.PostAsJsonAsync("api/BuildingPlans/Submit", request);
        if (resp.IsSuccessStatusCode)
        {
            IsApplicationCreated = true;
            var raw = await resp.Content.ReadAsStringAsync();
            GeneratedFeatureId = raw?.Trim('"');

            // persist banner across refresh
            await JS.InvokeVoidAsync("localStorage.setItem", LocalStorageFeatureKey, GeneratedFeatureId ?? string.Empty);

            // refresh workflow snapshot and determine next step
            await RefreshWorkflowSnapshotAsync();
            CurrentStep = DeriveStep(WorkflowSnapshot);
            StateHasChanged();
        }
    }

    private int DeriveStep(BuildingPlanWorkflowSnapshot? snap)
    {
        if (!IsApplicationCreated) return 0;
        if (snap == null) return CurrentStep; // fallback

        // Force assignment step if assignment missing or expired
        if (!snap.HasAssignment || snap.IsAssignmentExpired) return 1;

        // Site inspection pending
        if (snap.HasAssignment && !snap.IsInspectionCompleted) return 2;

        // Move to committee if inspection approved
        if (snap.CanProceedToCommittee || snap.CurrentStatus == BuildingAndPlanSteps.PlanningCommitteeReview) return 3;
        if (snap.CurrentStatus == BuildingAndPlanSteps.CommissionerApproval) return 4;
        if (snap.CurrentStatus is BuildingAndPlanSteps.Finalized or BuildingAndPlanSteps.Rejected) return 5;

        // Default mapping
        return snap.CurrentStatus switch
        {
            BuildingAndPlanSteps.Submission => 0,
            BuildingAndPlanSteps.AssignInspector => 1,
            BuildingAndPlanSteps.ToReview or BuildingAndPlanSteps.PlanningCommitteeReview  => 3,
            _ => CurrentStep
        };
    }

    private async Task RefreshWorkflowSnapshotAsync()
    {
        if (EntityId == Guid.Empty) return;

        var client = HttpClientFactory.CreateClient("AuthorizedClient");
        try
        {
            WorkflowSnapshot = await client.GetFromJsonAsync<BuildingPlanWorkflowSnapshot>($"api/BuildingPlans/{EntityId}/workflow-snapshot");
            ActiveAssignmentId = WorkflowSnapshot?.HasAssignment == true ? WorkflowSnapshot.ApplicationId : ActiveAssignmentId; // keep existing FK if needed
            ActiveAssignmentDate = WorkflowSnapshot?.AssignmentDate;
            CurrentStep = DeriveStep(WorkflowSnapshot);
        }
        catch { }
    }

    private void MoveToNextStep()
    {
        // Re-derive to ensure we don't skip locked steps
        CurrentStep = DeriveStep(WorkflowSnapshot);
        if (CurrentStep < buildingSteps.Count - 1) CurrentStep++;
    }
    private void MoveToNextStep2() { MoveToNextStep(); }
    private void MoveToPreviousStep() { if (CurrentStep > 0) CurrentStep--; }

    private void PreviewDocument(DocumentLinkResponse document) { SelectedPreviewDocument = document; IsPreviewDialogVisible = true; }
    private async Task DownloadDocument(DocumentLinkResponse document) { var (fileName, base64) = await DocClient.DownloadDocumentAsync(document); if (string.IsNullOrWhiteSpace(fileName) || string.IsNullOrWhiteSpace(base64)) return; await JS.InvokeVoidAsync("downloadBase64File", fileName, base64); }

    // Workflow History logic
    private List<WorkflowLogResponse> HistoryLogs = new();
    private bool IsHistoryDialogVisible = false;
    private bool IsHistoryLoading = false;

    private async Task ShowHistoryAsync()
    {
        if (EntityId == Guid.Empty || !IsApplicationCreated) return;
        IsHistoryDialogVisible = true;
        await LoadHistoryAsync();
    }

    private async Task RefreshHistoryAsync()
    {
        await LoadHistoryAsync(force:true);
    }

    private DateTime? _historyLastLoaded;
    private async Task LoadHistoryAsync(bool force = false)
    {
        if (!force && _historyLastLoaded.HasValue && (DateTime.UtcNow - _historyLastLoaded.Value).TotalSeconds < 10) return; // throttle
        IsHistoryLoading = true; StateHasChanged();
        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            var logs = await client.GetFromJsonAsync<List<WorkflowLogResponse>>($"api/BuildingPlans/{EntityId}/workflow-history");
            HistoryLogs = logs ?? new();
            _historyLastLoaded = DateTime.UtcNow;
        }
        catch { HistoryLogs = new(); }
        finally { IsHistoryLoading = false; StateHasChanged(); }
    }

    // Auto-refresh history dialog on workflow-changing events
    private async Task AutoRefreshHistoryIfOpen()
    {
        if (IsHistoryDialogVisible)
            await RefreshHistoryAsync();
    }

    // Extend existing events
    private async Task OnAssignmentScheduled(AssignInspector.AssignmentScheduledArgs args)
    {
        ActiveAssignmentId = args.AssignmentId; ActiveAssignmentDate = args.AssignmentDate; ActiveInspectorName = args.InspectorName; ActiveInspectorUserId = args.InspectorUserId;
        await RefreshWorkflowSnapshotAsync();
        await AutoRefreshHistoryIfOpen();
        StateHasChanged();
    }

    private async Task OnSiteInspectionSubmitted(SiteInspectionRequest _)
    {
        await RefreshWorkflowSnapshotAsync();
        await AutoRefreshHistoryIfOpen();
        StateHasChanged();
    }

    private async Task LoadExistingApplicationAsync(Guid id)
    {
        var client = HttpClientFactory.CreateClient("AuthorizedClient");
        var summary = await client.GetFromJsonAsync<BuildingPlanResponse>($"api/BuildingPlans/{id}/summary");
        if (summary is null) return;
        GeneratedFeatureId = summary.ApplicationNumber;
        await JS.InvokeVoidAsync("localStorage.setItem", LocalStorageFeatureKey, GeneratedFeatureId ?? string.Empty);
        EntityId = id;
        var contact = await client.GetFromJsonAsync<ContactResponse>($"api/Contact/{summary.ApplicantContactId}");
        if (contact is not null)
        {
            SelectedContact = new ContactResponse
            {
                Id = contact.Id,
                FullName = contact.FullName,
                NationalId = contact.NationalId,
                Email = contact.Email,
                PhoneNumber = contact.PhoneNumber,
                Address = contact.Address
            };
        }
        var property = await client.GetFromJsonAsync<PropertyResponse>($"api/Properties/{summary.PropertyId}");
        if (property is not null)
        {
            SelectedProperty = new PropertyResponse
            {
                Id = property.Id,
                PropertyId = property.PropertyId,
                Address = property.Address,
                TitleDeedNumber = property.TitleDeedNumber,
                AssessmentValue = property.AssessmentValue,
                IsCommercialUse = property.IsCommercialUse
            };
            if (SelectedProperty.Id is not null)
                await LoadPropertyOwners(SelectedProperty.Id);
        }
        if (ModuleId != Guid.Empty)
        {
            try
            {
                var jsonDocs = await client.GetStringAsync($"api/Documents/linked?moduleId={ModuleId}&entityId={id}&linkContext={MuniLK.Domain.Constants.LookupValues.DocumentTypes.BuildingAndPlanning.ToString()}");
                var documents = System.Text.Json.JsonSerializer.Deserialize<List<DocumentLinkResponse>>(jsonDocs, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                ApplicationDocuments = documents ?? new();
            }
            catch { ApplicationDocuments = new(); }
        }
        BuildingPlanSummery = summary.ToApplicationDto(SelectedContact, SelectedProperty);
        ActiveAssignmentId = summary.AssignmentId;
        ActiveAssignmentDate = summary.Assignment?.AssignmentDate;
        ActiveInspectorUserId = summary.Assignment?.AssignedToUserId;
        ActiveInspectorName = summary.Assignment?.AssignedToName;
        IsApplicationCreated = true;
        IsDocumentUploaded = true;
    }

    public void RecordClickHandler(RecordClickEventArgs<PropertyOwnerResponse> args)
    {
        if (args.RowData != null)
        {
            SelectedContact = new ContactResponse
            {
                Id = args.RowData.ContactId,
                FullName = args.RowData.FullName,
                NationalId = args.RowData.NIC ?? string.Empty,
                Email = args.RowData.Email ?? string.Empty,
                PhoneNumber = args.RowData.Phone ?? string.Empty,
                Address = args.RowData.Address ?? string.Empty
            };
        }
    }

    private Task OnDialogVisibilityChanged(bool value) => Task.CompletedTask;
    private Task OnContactSelected(ContactResponse? contact) { SelectedContact = contact; return Task.CompletedTask; }

    private async Task OnPropertySelected(PropertyResponse? property)
    {
        SelectedProperty = property; PropertyMode = "search";
        if (SelectedProperty?.Id != null) await LoadPropertyOwners(SelectedProperty.Id);
    }

    private async Task OnPropertyCreated(PropertyResponse created)
    {
        SelectedProperty = created; PropertyMode = "search";
        if (created.Id != null) await LoadPropertyOwners(created.Id.Value);
    }

    private async Task OnContactCreated(ContactResponse created)
    {
        SelectedContact = created;
        if (SelectedProperty?.Id != null && created.Id != null && !OwnerList.Any(o => o.ContactId == created.Id))
        {
            await CreatePropertyOwnerAsync(SelectedProperty.Id.Value, created.Id.Value, "Primary Owner");
            await LoadPropertyOwners(SelectedProperty.Id);
        }
    }

    private async Task CreatePropertyOwnerAsync(Guid propertyId, Guid contactId, string ownershipType)
    {
        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            var request = new CreatePropertyOwnerRequest { PropertyId = propertyId, ContactId = contactId, OwnershipType = ownershipType };
            await client.PostAsJsonAsync("api/PropertyOwners/Create", request);
        }
        catch { }
    }

    private async Task LoadPropertyOwners(Guid? propertyId)
    {
        var client = HttpClientFactory.CreateClient("AuthorizedClient");
        var response = await client.GetFromJsonAsync<List<PropertyOwnerResponse>>($"api/PropertyOwners/GetByProperty?propertyId={propertyId}");
        OwnerList = response ?? new();
    }

    private Task OnPlanUploaded(string fileName)
    {
        if (!string.IsNullOrWhiteSpace(fileName)) IsDocumentUploaded = true;
        return Task.CompletedTask;
    }
}

