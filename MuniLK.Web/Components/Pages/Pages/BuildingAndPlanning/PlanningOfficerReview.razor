@using MuniLK.Application.BuildingAndPlanning.DTOs
@using MuniLK.Application.Generic.Interfaces
@using MuniLK.Domain.Constants
@using MuniLK.Domain.Constants.Flows
@using MuniLK.Web.Services
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using System.ComponentModel.DataAnnotations
@inject CustomAuthStateProvider AuthenticationStateProvider;

@*
    PlanningOfficerReview.razor
    Handles the planning officer review step in the building plan workflow.
    Parameters: BuildingPlanApplicationDto Model, EventCallbacks for save draft and advance step
    Provides UI for zoning type, setbacks, planning report, and decision making.
*@

<div class="container-fluid">
    <div class="row">
        <!-- Left Column: Property & Applicant Summary -->
        <div class="col-lg-4 mb-4">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h6 class="mb-0"><i class="fas fa-info-circle me-2"></i>Application Summary</h6>
                </div>
                <div class="card-body">
                    @if (Model?.PropertySummary != null)
                    {
                        <div class="mb-3">
                            <h6 class="text-muted">Property Details</h6>
                            <p class="mb-1"><strong>ID:</strong> @Model.PropertySummary.PropertyId</p>
                            <p class="mb-1"><strong>Address:</strong> @Model.PropertySummary.Address</p>
                        </div>
                    }

                    @if (Model?.ApplicantSummary != null)
                    {
                        <div class="mb-3">
                            <h6 class="text-muted">Applicant Details</h6>
                            <p class="mb-1"><strong>Name:</strong> @Model.ApplicantSummary.FullName</p>
                            <p class="mb-1"><strong>Contact:</strong> @Model.ApplicantSummary.PhoneNumber</p>
                        </div>
                    }

                    @if (Model?.Documents?.Any() == true)
                    {
                        <div class="mb-3">
                            <h6 class="text-muted">Survey Plan Documents</h6>
                            @foreach (var doc in Model.Documents.Take(3))
                            {
                                <div class="d-flex align-items-center mb-1">
                                    <i class="fas fa-file-pdf text-danger me-2"></i>
                                    <small>@doc.DocumentType</small>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Right Column: Planning Review Form -->
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="mb-0"><i class="fas fa-clipboard-check me-2"></i>Planning Officer Review</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="ReviewForm" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        <div class="row">
                            <!-- Zoning Information -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Zoning Type <span class="text-danger">*</span></label>
                                <SfDropDownList TValue="ZoningType?" TItem="ZoningTypeOption"
                                                @bind-Value="ReviewForm.ZoningType"
                                                DataSource="ZoningOptions"
                                                Placeholder="Select zoning type">
                                    <DropDownListFieldSettings Text="DisplayName" Value="Value" />
                                </SfDropDownList>
                            </div>

                            <!-- Road Reservation -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Road Reservation (m)</label>
                                <SfNumericTextBox TValue="decimal?" @bind-Value="ReviewForm.RoadReservation"
                                                  Min="0m" Format="F2" Step="0.5m" />
                            </div>

                            <!-- Setbacks Row -->
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Front Setback (m)</label>
                                <SfNumericTextBox TValue="decimal?" @bind-Value="ReviewForm.FrontSetback"
                                                  Min="0m" Format="F2" Step="0.5m" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Side Setback (m)</label>
                                <SfNumericTextBox TValue="decimal?" @bind-Value="ReviewForm.SideSetback"
                                                  Min="0m" Format="F2" Step="0.5m" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Rear Setback (m)</label>
                                <SfNumericTextBox TValue="decimal?" @bind-Value="ReviewForm.RearSetback"
                                                  Min="0m" Format="F2" Step="0.5m" />
                            </div>

                            <!-- Planning Metrics -->
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Floor Area Ratio</label>
                                <SfNumericTextBox TValue="decimal?" @bind-Value="ReviewForm.FloorAreaRatio"
                                                  Min="0m" Max="10m" Format="F2" Step="0.1m" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Max Height (m)</label>
                                <SfNumericTextBox TValue="decimal?" @bind-Value="ReviewForm.MaxHeight"
                                                  Min="0m" Format="F1" Step="1m" />
                            </div>
                        </div>

                        <!-- Planning Conditions -->
                        <div class="mb-3">
                            <label class="form-label">Planning Conditions</label>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @bind="ReviewForm.ParkingRequired" id="parkingRequired">
                                        <label class="form-check-label" for="parkingRequired">Parking Required</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @bind="ReviewForm.LandscapeRequired" id="landscapeRequired">
                                        <label class="form-check-label" for="landscapeRequired">Landscape Required</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @bind="ReviewForm.GreenBufferRequired" id="greenBufferRequired">
                                        <label class="form-check-label" for="greenBufferRequired">Green Buffer Required</label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Planning Report -->
                        <div class="mb-4">
                            <label class="form-label">Planning Report <span class="text-danger">*</span></label>
                            <SfTextArea @bind-Value="ReviewForm.PlanningReport" Rows="6" Width="100%"
                                        Placeholder="Enter detailed planning review comments and recommendations..." />
                        </div>

                        <!-- Action Buttons -->
                        @if (CanUserTakeAction)
                        {
                            <div class="d-flex gap-2 flex-wrap">
                                <SfButton IsPrimary="false" CssClass="btn-outline-secondary"
                                          @onclick="SaveDraft" Disabled="@IsSubmitting">
                                    <i class="fas fa-save me-1"></i>Save Draft
                                </SfButton>

                                <SfButton IsPrimary="true" CssClass="btn-success"
                                          @onclick="() => ShowConfirmDialog(ReviewDecision.Approved)"
                                          Disabled="@(IsSubmitting || !IsFormValid())">
                                    <i class="fas fa-check me-1"></i>Approve & Forward
                                </SfButton>

                                <SfButton IsPrimary="false" CssClass="btn-warning"
                                          @onclick="() => ShowConfirmDialog(ReviewDecision.ClarificationRequired)"
                                          Disabled="@(IsSubmitting || !IsFormValid())">
                                    <i class="fas fa-question-circle me-1"></i>Request Clarification
                                </SfButton>

                                <SfButton IsPrimary="false" CssClass="btn-danger"
                                          @onclick="() => ShowConfirmDialog(ReviewDecision.Rejected)"
                                          Disabled="@(IsSubmitting || !IsFormValid())">
                                    <i class="fas fa-times me-1"></i>Reject
                                </SfButton>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i>
                                You do not have permission to take action on this application.
                            </div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Dialog -->
<SfDialog @bind-Visible="ShowConfirmationDialog" Width="400px" ShowCloseIcon="true" IsModal="true">
    <DialogTemplates>
        <Header>Confirm Decision</Header>
        <Content>
            <p>Are you sure you want to <strong>@PendingDecision.ToString().ToLower()</strong> this application?</p>
            @if (PendingDecision == ReviewDecision.Rejected)
            {
                <div class="mt-3">
                    <label class="form-label">Rejection Reason <span class="text-danger">*</span></label>
                    <SfTextArea @bind-Value="RejectionReason" Rows="3" Placeholder="Please provide reason for rejection..." />
                </div>
            }
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Cancel" OnClick="HideConfirmDialog" />
        <DialogButton Content="Confirm" IsPrimary="true" OnClick="ConfirmDecision" />
    </DialogButtons>
</SfDialog>

@code {
    [Parameter] public BuildingPlanApplicationDto Model { get; set; } = default!;
    [Parameter] public EventCallback<BuildingPlanApplicationDto> OnSaveDraft { get; set; }
    [Parameter] public EventCallback<AdvanceStepRequestDto> OnAdvanceStep { get; set; }

    private PlanningReviewForm ReviewForm = new();
    private bool IsSubmitting = false;
    private bool CanUserTakeAction = false;
    private bool ShowConfirmationDialog = false;
    private ReviewDecision PendingDecision;
    private string RejectionReason = string.Empty;

    private List<ZoningTypeOption> ZoningOptions = new()
    {
        new() { Value = ZoningType.Residential, DisplayName = "Residential" },
        new() { Value = ZoningType.Commercial, DisplayName = "Commercial" },
        new() { Value = ZoningType.Industrial, DisplayName = "Industrial" },
        new() { Value = ZoningType.Mixed, DisplayName = "Mixed" }
    };

    protected override async Task OnInitializedAsync()
    {
        await IsInProperRole();
    }

    protected override void OnParametersSet()
    {
        if (Model != null)
        {
            ReviewForm.PlanningReport = Model.PlanningReport ?? string.Empty;
        }
    }

    private async Task IsInProperRole()
    {
        CanUserTakeAction = await AuthenticationStateProvider.IsInRoleAsync("PlanningOfficer")
            || await AuthenticationStateProvider.IsInRoleAsync("Admin");

        await InvokeAsync(StateHasChanged);
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(ReviewForm.PlanningReport);
    }

    private async Task SaveDraft()
    {
        IsSubmitting = true;
        try
        {
            if (Model != null)
            {
                Model.PlanningReport = ReviewForm.PlanningReport;
                await OnSaveDraft.InvokeAsync(Model);
            }
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private void ShowConfirmDialog(ReviewDecision decision)
    {
        PendingDecision = decision;
        RejectionReason = string.Empty;
        ShowConfirmationDialog = true;
    }

    private void HideConfirmDialog()
    {
        ShowConfirmationDialog = false;
    }

    private async Task ConfirmDecision()
    {
        if (PendingDecision == ReviewDecision.Rejected && string.IsNullOrWhiteSpace(RejectionReason))
        {
            return; // Don't proceed without rejection reason
        }

        IsSubmitting = true;
        ShowConfirmationDialog = false;

        try
        {
            var comments = PendingDecision == ReviewDecision.Rejected ? RejectionReason : ReviewForm.PlanningReport;

            var request = new AdvanceStepRequestDto
            {
                ApplicationId = Model.Id,
                Decision = PendingDecision,
                Comments = comments,
                PerformedByUserId = (await AuthenticationStateProvider.GetUserIdAsync()) ?? string.Empty,
                PerformedByRole = "PlanningOfficer"
            };

            await OnAdvanceStep.InvokeAsync(request);
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        // This is called when form is submitted but we handle submission in button click events
        await Task.CompletedTask;
    }

    public class PlanningReviewForm
    {
        public ZoningType? ZoningType { get; set; }
        public decimal? FrontSetback { get; set; }
        public decimal? SideSetback { get; set; }
        public decimal? RearSetback { get; set; }
        public decimal? RoadReservation { get; set; }
        public decimal? FloorAreaRatio { get; set; }
        public decimal? MaxHeight { get; set; }

        [Required(ErrorMessage = "Planning report is required")]
        public string PlanningReport { get; set; } = string.Empty;

        public bool ParkingRequired { get; set; }
        public bool LandscapeRequired { get; set; }
        public bool GreenBufferRequired { get; set; }
    }

    public class ZoningTypeOption
    {
        public ZoningType Value { get; set; }
        public string DisplayName { get; set; } = string.Empty;
    }
}