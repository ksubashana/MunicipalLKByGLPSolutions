@using MuniLK.Application.BuildingAndPlanning.DTOs
@using MuniLK.Domain.Constants.Flows
@using MuniLK.Web.Services
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@inject IHttpClientFactory HttpClientFactory
@inject CustomAuthStateProvider AuthenticationStateProvider

<style>
    /* Container spacing & visual alignment */
    .pc-form-section + .pc-form-section {
        margin-top: 1.75rem;
        padding-top: 1.25rem;
        border-top: 1px solid var(--bs-border-color);
    }

    .pc-grid .form-label {
        font-weight: 600;
        margin-bottom: .25rem;
        display: inline-flex;
        align-items: center;
        gap: 4px;
    }

    /* Modern minimal required indicator - small black dot */
    .pc-grid .form-label .req {
        width: 4px;
        height: 4px;
        display: inline-block;
        border-radius: 50%;
        background: #333;
        font-size: 0;
        line-height: 0;
        flex-shrink: 0;
    }

    /* Normalize vertical rhythm */
    .pc-grid .mb-3 { margin-bottom: 1rem !important; }

    /* Members grid */
    .members-wrapper {
        background: var(--bs-light);
        border: 1px solid var(--bs-border-color);
        border-radius: .5rem;
        padding: .75rem .85rem;
    }

    .member-row {
        background: #fff;
        border: 1px solid var(--bs-border-color);
        border-radius: .4rem;
        padding: .5rem .65rem;
        margin-bottom: .6rem;
        box-shadow: 0 1px 2px rgba(0,0,0,.04);
    }

    .member-row:last-child { margin-bottom: .2rem; }

    .member-actions {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
    }

    /* Clean minimal remove button */
    .btn-remove {
        width: 28px;
        height: 28px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0;
        border: 1px solid #ddd;
        border-radius: .375rem;
        background: #fff;
        color: #666;
        font-size: 14px;
        transition: all 0.15s ease;
    }

    .btn-remove:hover:not(:disabled) {
        background: #f8f9fa;
        border-color: #aaa;
        color: #333;
    }

    .btn-remove:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    /* Compact multi-line text areas */
    textarea.e-input, .e-control-wrapper textarea {
        min-height: 90px;
    }


</style>

<div class="container-fluid">
    <div class="row">
        <!-- LEFT SUMMARY (unchanged - trim if needed) -->
        <div class="col-lg-4 mb-4">
            <div class="card h-100">
                <div class="card-header bg-success text-white"><h5 class="mb-0">Application Summary</h5></div>
                <div class="card-body">
                    <div class="mb-2"><small class="text-muted">Application #</small><div class="fw-bold">@Model?.ApplicationNumber</div></div>
                    <div class="mb-2"><small class="text-muted">Purpose</small><div>@Model?.BuildingPurpose</div></div>
                    <div class="mb-2"><small class="text-muted">Floors</small><div>@Model?.NoOfFloors</div></div>
                    @if (!string.IsNullOrWhiteSpace(Model?.PlanningReport))
                    {
                        <div class="mb-2">
                            <h6 class="text-success">Planning Review</h6>
                            <small class="text-muted">@((Model.PlanningReport.Length > 100) ? Model.PlanningReport[..100] + "..." : Model.PlanningReport)</small>
                        </div>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model?.EngineerReport))
                    {
                        <div class="mb-2">
                            <h6 class="text-info">Engineer Review</h6>
                            <small class="text-muted">@((Model.EngineerReport.Length > 100) ? Model.EngineerReport[..100] + "..." : Model.EngineerReport)</small>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- RIGHT FORM -->
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header bg-light"><h5 class="mb-0">Planning Committee Review</h5></div>
                <div class="card-body">
                    <EditForm Model="ReviewForm" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <!-- Session Metadata -->
                        <div class="pc-form-section pc-grid row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Meeting Date <span class="req" aria-hidden="true"></span></label>
                                <SfDatePicker @bind-Value="ReviewForm.MeetingDate" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Committee Type <span class="req">*</span></label>
                                <SfDropDownList @bind-Value="ReviewForm.CommitteeType" DataSource="CommitteeTypeOptions" Placeholder="Select">
                                    <DropDownListFieldSettings Value="Value" Text="DisplayName"/>
                                </SfDropDownList>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Reference No <span class="req">*</span></label>
                                <SfTextBox @bind-Value="ReviewForm.MeetingReferenceNo" Placeholder="PC/2025/001"/>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Chairperson <span class="req">*</span></label>
                                <SfTextBox @bind-Value="ReviewForm.ChairpersonName" />
                            </div>

                            <div class="col-12 mb-3">
                                <label class="form-label">Members Present <span class="req">*</span></label>
                                <div class="members-wrapper">
                                    @foreach (var member in ReviewForm.MembersPresent)
                                    {
                                        <div class="row g-2 member-row">
                                            <div class="col-md-5">
                                                <SfTextBox @bind-Value="member.Name" Placeholder="Name"/>
                                            </div>
                                            <div class="col-md-5">
                                                <SfTextBox @bind-Value="member.Designation" Placeholder="Designation"/>
                                            </div>
                                            <div class="col-md-2 member-actions">
                                                <button type="button" 
                                                        class="btn-remove" 
                                                        title="Remove member"
                                                        @onclick="() => RemoveMember(member)"
                                                        disabled="@(ReviewForm.MembersPresent.Count==1)">
                                                    ×
                                                </button>
                                            </div>
                                        </div>
                                    }
                                    <SfButton CssClass="btn-outline-primary btn-sm mt-1" @onclick="AddMember">
                                        <i class="fa fa-plus me-1"></i>Add Member
                                    </SfButton>
                                </div>
                            </div>
                        </div>

                        <!-- Inputs -->
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Inspection Reports</label>
                                <SfMultiSelect @bind-Value="ReviewForm.InspectionReportsReviewed" DataSource="AvailableInspectionReports" Placeholder="Select">
                                    <MultiSelectFieldSettings Value="Value" Text="Text"/>
                                </SfMultiSelect>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Documents Reviewed</label>
                                <SfMultiSelect @bind-Value="ReviewForm.DocumentsReviewed" DataSource="AvailableDocumentTypes" Placeholder="Select">
                                    <MultiSelectFieldSettings Value="Value" Text="Text"/>
                                </SfMultiSelect>
                            </div>
                            <div class="col-md-6 mb-3">
                                <SfCheckBox @bind-Checked="ReviewForm.ApplicantRepresented" Label="Applicant Represented"/>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">External Agencies</label>
                                <SfMultiSelect @bind-Value="ReviewForm.ExternalAgenciesConsulted" DataSource="AvailableExternalAgencies" Placeholder="Select">
                                    <MultiSelectFieldSettings Value="Value" Text="Text"/>
                                </SfMultiSelect>
                            </div>
                            <div class="col-md-12 mb-3">
                                <label class="form-label">Discussion Summary</label>
                                <SfTextArea @bind-Value="ReviewForm.CommitteeDiscussionsSummary" Width="100%" Rows="4" />
                            </div>
                        </div>

                        <!-- Decision -->
                        <div class="pc-form-section pc-grid row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Decision <span class="req">*</span></label>
                                <SfDropDownList @bind-Value="ReviewForm.CommitteeDecision" DataSource="CommitteeDecisionOptions" Placeholder="Select decision">
                                    <DropDownListFieldSettings Value="Value" Text="DisplayName"/>
                                </SfDropDownList>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Recorded By <span class="req">*</span></label>
                                <SfTextBox @bind-Value="ReviewForm.RecordedByOfficer" />
                            </div>

                            @if (ReviewForm.CommitteeDecision == CommitteeDecision.ApproveWithConditions)
                            {
                                <div class="col-12 mb-3">
                                    <label class="form-label">Conditions <span class="req">*</span></label>
                                    <SfTextArea @bind-Value="ReviewForm.ConditionsImposed" Rows="3" Width="100%" />
                                </div>
                            }
                            @if (ReviewForm.CommitteeDecision == CommitteeDecision.Reject || ReviewForm.CommitteeDecision == CommitteeDecision.DeferForClarifications)
                            {
                                <div class="col-12 mb-3">
                                    <label class="form-label">Reason <span class="req">*</span></label>
                                    <SfTextArea @bind-Value="ReviewForm.ReasonForRejectionOrDeferral" Rows="3" Width="100%" />
                                </div>
                            }

                            <div class="col-md-12 mb-3">
                                <label class="form-label">Digital Signatures</label>
                                <SfTextArea @bind-Value="DigitalSignaturesText" Width="100%" Rows="2" Placeholder="One per line"/>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        @if (CanUserTakeAction)
                        {
                            <div class="d-flex flex-wrap gap-2 mt-2">
                                <SfButton CssClass="btn-outline-secondary" Disabled="@IsSubmitting" @onclick="SaveDraft">
                                    <i class="fas fa-save me-1"></i>Draft
                                </SfButton>

                                <SfButton CssClass="btn-success" Disabled="@(!CanSubmitApprove || IsSubmitting)" @onclick="(() => SubmitImmediate(CommitteeDecision.Approve))">
                                    <i class="fas fa-check me-1"></i>Approve
                                </SfButton>

                                <SfButton CssClass="btn-primary" Disabled="@(!CanSubmitApproveWithConditions || IsSubmitting)" @onclick="(() => SubmitImmediate(CommitteeDecision.ApproveWithConditions))">
                                    <i class="fas fa-clipboard-check me-1"></i>Approve w/ Conditions
                                </SfButton>

                                <SfButton CssClass="btn-warning" Disabled="@(!CanSubmitClarify || IsSubmitting)" @onclick="(() => SubmitImmediate(CommitteeDecision.DeferForClarifications))">
                                    <i class="fas fa-question-circle me-1"></i>Request Clarification
                                </SfButton>

                                <SfButton CssClass="btn-danger" Disabled="@(!CanSubmitReject || IsSubmitting)" @onclick="(() => SubmitImmediate(CommitteeDecision.Reject))">
                                    <i class="fas fa-times me-1"></i>Reject
                                </SfButton>
                            </div>
                        }

                        @if (IsSubmitting)
                        {
                            <div class="mt-3 small text-muted">
                                <i class="fas fa-spinner fa-spin me-1"></i>Processing...
                            </div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public BuildingPlanApplicationDto? Model { get; set; }

    private PlanningCommitteeReviewRequest ReviewForm = new();
    private bool IsSubmitting;
    private bool CanUserTakeAction;
    private string DigitalSignaturesText = string.Empty;

    // Options (same as before)
    private List<DropdownOption> CommitteeTypeOptions = new()
    {
        new() { Value = CommitteeType.PlanningCommittee, DisplayName = "Planning Committee" },
        new() { Value = CommitteeType.SubCommittee, DisplayName = "Sub Committee" },
        new() { Value = CommitteeType.MainCommittee, DisplayName = "Main Committee" }
    };
    private List<DropdownOption> CommitteeDecisionOptions = new()
    {
        new() { Value = CommitteeDecision.Approve, DisplayName = "Approve" },
        new() { Value = CommitteeDecision.ApproveWithConditions, DisplayName = "Approve with Conditions" },
        new() { Value = CommitteeDecision.Reject, DisplayName = "Reject" },
        new() { Value = CommitteeDecision.DeferForClarifications, DisplayName = "Defer for Clarifications" }
    };
    private List<SelectOption> AvailableInspectionReports = new()
    {
        new() { Value = "site_inspection_1", Text = "Site Inspection Report #1" },
        new() { Value = "structural_inspection", Text = "Structural Inspection" },
        new() { Value = "environmental_check", Text = "Environmental Check" }
    };
    private List<SelectOption> AvailableDocumentTypes = new()
    {
        new() { Value = "site_plan", Text = "Site Plan" },
        new() { Value = "zoning_clearance", Text = "Zoning Clearance" },
        new() { Value = "survey_plan", Text = "Survey Plan" },
        new() { Value = "structural_drawings", Text = "Structural Drawings" },
        new() { Value = "architectural_drawings", Text = "Architectural Drawings" }
    };
    private List<SelectOption> AvailableExternalAgencies = new()
    {
        new() { Value = "CEA", Text = "Central Environmental Authority" },
        new() { Value = "NBRO", Text = "National Building Research Organization" },
        new() { Value = "CCD", Text = "Coast Conservation Department" },
        new() { Value = "FIRE_DEPT", Text = "Fire Department" },
        new() { Value = "UDA", Text = "Urban Development Authority" }
    };

    // Button state helpers
    private bool BaseFormOk =>
        Model != null &&
        ReviewForm.MeetingDate != default &&
        !string.IsNullOrWhiteSpace(ReviewForm.MeetingReferenceNo) &&
        !string.IsNullOrWhiteSpace(ReviewForm.ChairpersonName) &&
        ReviewForm.MembersPresent.Any(m => !string.IsNullOrWhiteSpace(m.Name)) &&
        !string.IsNullOrWhiteSpace(ReviewForm.RecordedByOfficer);

    private bool CanSubmitApprove => BaseFormOk;
    private bool CanSubmitApproveWithConditions => BaseFormOk && !string.IsNullOrWhiteSpace(ReviewForm.ConditionsImposed);
    private bool CanSubmitClarify => BaseFormOk && !string.IsNullOrWhiteSpace(ReviewForm.ReasonForRejectionOrDeferral);
    private bool CanSubmitReject => BaseFormOk && !string.IsNullOrWhiteSpace(ReviewForm.ReasonForRejectionOrDeferral);

    protected override async Task OnInitializedAsync()
    {
        CanUserTakeAction = await AuthenticationStateProvider.IsInRoleAsync("CommitteeMember")
            || await AuthenticationStateProvider.IsInRoleAsync("CommitteeChairperson")
            || await AuthenticationStateProvider.IsInRoleAsync("Admin");

        if (ReviewForm.MembersPresent.Count == 0)
            ReviewForm.MembersPresent.Add(new CommitteeMember());

        if (Model != null)
            ReviewForm.ApplicationId = Model.Id;

        ReviewForm.MeetingDate = DateTime.Today;
        ReviewForm.CommitteeDecision = CommitteeDecision.Pending;
    }

    private void AddMember() => ReviewForm.MembersPresent.Add(new CommitteeMember());
    private void RemoveMember(CommitteeMember m)
    {
        if (ReviewForm.MembersPresent.Count > 1)
            ReviewForm.MembersPresent.Remove(m);
    }

    private async Task SaveDraft()
    {
        if (Model == null) return;
        await SendToApi(finalize: false, forceDecision: false);
    }

    private async Task SubmitImmediate(CommitteeDecision decision)
    {
        if (Model == null) return;

        // Set the decision on form before build
        ReviewForm.CommitteeDecision = decision;
        await SendToApi(finalize: true, forceDecision: true);
    }

    private async Task SendToApi(bool finalize, bool forceDecision)
    {
        if (Model == null) return;
        IsSubmitting = true;
        try
        {
            var client = HttpClientFactory.CreateClient("AuthorizedClient");
            var request = BuildRequest();
            if (!forceDecision && request.CommitteeDecision == CommitteeDecision.Pending)
                request.CommitteeDecision = CommitteeDecision.Pending;

            var resp = await client.PostAsJsonAsync(
                $"api/BuildingPlans/{Model.Id}/committee-review?finalize={finalize.ToString().ToLower()}",
                request);

            if (!resp.IsSuccessStatusCode)
            {
                var err = await resp.Content.ReadAsStringAsync();
                Console.WriteLine($"Committee review {(finalize ? "submit" : "draft")} failed: {err}");
            }
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }

    private PlanningCommitteeReviewRequest BuildRequest() =>
        new()
        {
            ApplicationId = Model!.Id,
            MeetingDate = ReviewForm.MeetingDate,
            CommitteeType = ReviewForm.CommitteeType,
            MeetingReferenceNo = ReviewForm.MeetingReferenceNo,
            ChairpersonName = ReviewForm.ChairpersonName,
            MembersPresent = ReviewForm.MembersPresent
    .Where(m => !string.IsNullOrWhiteSpace(m.Name) &&
                !string.IsNullOrWhiteSpace(m.Designation))
    .ToList(),
            DocumentsReviewed = ReviewForm.DocumentsReviewed,
            ApplicantRepresented = ReviewForm.ApplicantRepresented,
            ExternalAgenciesConsulted = ReviewForm.ExternalAgenciesConsulted,
            CommitteeDiscussionsSummary = ReviewForm.CommitteeDiscussionsSummary,
            CommitteeDecision = ReviewForm.CommitteeDecision,
            ConditionsImposed = ReviewForm.ConditionsImposed,
            ReasonForRejectionOrDeferral = ReviewForm.ReasonForRejectionOrDeferral,
            RecordedByOfficer = ReviewForm.RecordedByOfficer,
            DigitalSignatures = DigitalSignaturesText
                .Split('\n', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                .ToList()
        };

    private Task HandleValidSubmit() => SaveDraft();

    // Helper classes
    private class DropdownOption { public object Value { get; set; } = default!; public string DisplayName { get; set; } = default!; }
    private class SelectOption { public string Value { get; set; } = default!; public string Text { get; set; } = default!; }
}