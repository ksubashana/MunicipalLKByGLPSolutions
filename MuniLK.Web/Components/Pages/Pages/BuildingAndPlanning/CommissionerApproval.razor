@using MuniLK.Application.BuildingAndPlanning.DTOs
@using MuniLK.Application.Generic.Interfaces
@using MuniLK.Domain.Constants.Flows
@using MuniLK.Web.Services
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using System.ComponentModel.DataAnnotations
@inject CustomAuthStateProvider AuthenticationStateProvider;

@*
    CommissionerApproval.razor
    Handles the final commissioner approval step in the building plan workflow.
    Parameters: BuildingPlanApplicationDto Model, EventCallbacks for save draft and advance step
    Provides UI for final decision, conditions, fees, and permit generation.
*@

<div class="container-fluid">
    <div class="row">
        <!-- Left Column: Review Summary -->
        <div class="col-lg-5 mb-4">
            <div class="card h-100">
                <div class="card-header bg-purple text-white">
                    <h6 class="mb-0"><i class="fas fa-clipboard-list me-2"></i>Review Summary</h6>
                </div>
                <div class="card-body">
                    <!-- Application Overview -->
                    <div class="mb-4">
                        <h6 class="text-muted">Application Details</h6>
                        <div class="row">
                            <div class="col-6">
                                <small><strong>Number:</strong> @Model?.ApplicationNumber</small>
                            </div>
                            <div class="col-6">
                                <small><strong>Submitted:</strong> @Model?.SubmittedOn.ToString("MMM dd, yyyy")</small>
                            </div>
                        </div>
                        <div class="row mt-1">
                            <div class="col-6">
                                <small><strong>Floors:</strong> @Model?.NoOfFloors</small>
                            </div>
                            <div class="col-6">
                                <small><strong>Purpose:</strong> @Model?.BuildingPurpose</small>
                            </div>
                        </div>
                    </div>

                    <!-- Planning Review Summary -->
                    @if (!string.IsNullOrEmpty(Model?.PlanningReport))
                    {
                        <div class="mb-3">
                            <h6 class="text-muted">
                                <i class="fas fa-map-marked-alt text-primary me-1"></i>Planning Officer Review
                                <span class="badge bg-primary ms-2">Approved</span>
                            </h6>
                            <div class="bg-light p-2 rounded">
                                <small>@Model.PlanningReport</small>
                            </div>
                        </div>
                    }

                    <!-- Engineering Review Summary -->
                    @if (!string.IsNullOrEmpty(Model?.EngineerReport))
                    {
                        <div class="mb-3">
                            <h6 class="text-muted">
                                <i class="fas fa-hard-hat text-warning me-1"></i>Engineering Review
                                <span class="badge bg-success ms-2">Passed</span>
                            </h6>
                            <div class="bg-light p-2 rounded">
                                <small>@Model.EngineerReport</small>
                            </div>
                        </div>
                    }

                    <!-- Documents Summary -->
                    @if (Model?.Documents?.Any() == true)
                    {
                        <div class="mb-3">
                            <h6 class="text-muted">Attached Documents (@Model.Documents.Count)</h6>
                            @foreach (var doc in Model.Documents.Take(4))
                            {
                                <div class="d-flex align-items-center mb-1">
                                    <i class="fas fa-file text-secondary me-2"></i>
                                    <small>@doc.DocumentType</small>
                                </div>
                            }
                            @if (Model.Documents.Count > 4)
                            {
                                <small class="text-muted">... and @(Model.Documents.Count - 4) more</small>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Right Column: Commissioner Decision Form -->
        <div class="col-lg-7">
            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="mb-0"><i class="fas fa-crown me-2"></i>Commissioner Final Approval</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="ReviewForm" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        <!-- Commissioner Decision Remarks -->
                        <div class="mb-3">
                            <label class="form-label">Commissioner Decision Remarks <span class="text-danger">*</span></label>
                            <SfTextArea @bind-Value="ReviewForm.CommissionerDecisionRemarks" Rows="4" Width="100%"
                                        Placeholder="Enter final decision remarks, conditions, or directives..." />
                        </div>

                        <!-- Additional Conditions -->
                        <div class="mb-3">
                            <label class="form-label">Additional Conditions</label>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" @bind="ReviewForm.RequireInspection" id="requireInspection">
                                        <label class="form-check-label" for="requireInspection">Construction Inspection Required</label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" @bind="ReviewForm.RequireCompletionCert" id="requireCompletionCert">
                                        <label class="form-check-label" for="requireCompletionCert">Completion Certificate Required</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" @bind="ReviewForm.RequireEnvironmentalClearance" id="requireEnvClearance">
                                        <label class="form-check-label" for="requireEnvClearance">Environmental Clearance Required</label>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" @bind="ReviewForm.RequireFireSafety" id="requireFireSafety">
                                        <label class="form-check-label" for="requireFireSafety">Fire Safety Compliance Required</label>
                                    </div>
                                </div>
                            </div>

                            <div class="mt-2">
                                <SfTextArea @bind-Value="ReviewForm.CustomConditions" Rows="2" Width="100%"
                                            Placeholder="Enter any custom conditions or requirements..." />
                            </div>
                        </div>

                        <!-- Fees and Development Charges -->
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label class="form-label">Development Charges (LKR)</label>
                                <SfNumericTextBox TValue="decimal?" @bind-Value="ReviewForm.DevelopmentCharges"
                                                  Min="0" Format="N2" Step="1000" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Processing Fees (LKR)</label>
                                <SfNumericTextBox TValue="decimal?" @bind-Value="ReviewForm.ProcessingFees"
                                                  Min="0" Format="N2" Step="500" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label"><strong>Total Amount (LKR)</strong></label>
                                <SfNumericTextBox TValue="decimal" Value="@TotalAmount" Enabled="false"
                                                  Format="N2" CssClass="fw-bold" />
                            </div>
                        </div>

                        <!-- Permit Generation Option -->
                        <div class="mb-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="ReviewForm.GeneratePermitPdf" id="generatePermit">
                                <label class="form-check-label" for="generatePermit">
                                    <i class="fas fa-file-pdf text-danger me-1"></i>
                                    Generate building permit PDF on approval
                                </label>
                            </div>
                            <small class="text-muted">The permit will be automatically generated and made available for download.</small>
                        </div>

                        <!-- Action Buttons -->
                        @if (CanUserTakeAction)
                        {
                            <div class="d-flex gap-2 flex-wrap">
                                <SfButton IsPrimary="false" CssClass="btn-outline-secondary"
                                          @onclick="SaveDraft" Disabled="@IsSubmitting">
                                    <i class="fas fa-save me-1"></i>Save Draft
                                </SfButton>

                                <SfButton IsPrimary="true" CssClass="btn-success btn-lg"
                                          @onclick="() => ShowConfirmDialog(ReviewDecision.Approved)"
                                          Disabled="@(IsSubmitting || !IsFormValid())">
                                    <i class="fas fa-stamp me-1"></i>Approve & Issue Permit
                                </SfButton>

                                <SfButton IsPrimary="false" CssClass="btn-danger"
                                          @onclick="() => ShowConfirmDialog(ReviewDecision.Rejected)"
                                          Disabled="@(IsSubmitting || !IsFormValid())">
                                    <i class="fas fa-ban me-1"></i>Reject Application
                                </SfButton>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i>
                                You do not have permission to take action on this application.
                            </div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Dialog -->
<SfDialog @bind-Visible="ShowConfirmationDialog" Width="500px" ShowCloseIcon="true" IsModal="true">
    <DialogTemplates>
        <Header>
            <div class="d-flex align-items-center">
                @if (PendingDecision == ReviewDecision.Approved)
                {
                    <i class="fas fa-stamp text-success me-2"></i>
                    <span>Final Approval & Permit Issuance</span>
                }
                else
                {
                    <i class="fas fa-ban text-danger me-2"></i>
                    <span>Reject Application</span>
                }
            </div>
        </Header>
        <Content>
            @if (PendingDecision == ReviewDecision.Approved)
            {
                <div class="alert alert-success">
                    <h6><i class="fas fa-check-circle me-2"></i>Ready to Approve</h6>
                    <p>This will finalize the building plan application and issue the permit.</p>
                </div>

                <div class="mb-3">
                    <strong>Summary:</strong>
                    <ul class="mb-0">
                        @if (TotalAmount > 0)
                        {
                            <li>Total fees: LKR @TotalAmount.ToString("N2")</li>
                        }
                        @if (ReviewForm.GeneratePermitPdf)
                        {
                            <li>Building permit PDF will be generated</li>
                        }
                        @if (GetActiveConditionsCount() > 0)
                        {
                            <li>@GetActiveConditionsCount() additional condition(s) applied</li>
                        }
                    </ul>
                </div>
            }
            else
            {
                <p>Are you sure you want to <strong>reject</strong> this building plan application?</p>
                
                <div class="mt-3">
                    <label class="form-label">Rejection Reason <span class="text-danger">*</span></label>
                    <SfTextArea @bind-Value="RejectionReason" Rows="3" 
                                Placeholder="Please provide comprehensive reasons for rejection..." />
                </div>
            }

            <p class="mt-3"><strong>This action cannot be undone.</strong></p>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Cancel" OnClick="HideConfirmDialog" />
        <DialogButton Content="@(PendingDecision == ReviewDecision.Approved ? "Issue Permit" : "Reject")" 
                      IsPrimary="true" OnClick="ConfirmDecision" />
    </DialogButtons>
</SfDialog>

@code {
    [Parameter] public BuildingPlanApplicationDto Model { get; set; } = default!;
    [Parameter] public EventCallback<BuildingPlanApplicationDto> OnSaveDraft { get; set; }
    [Parameter] public EventCallback<AdvanceStepRequestDto> OnAdvanceStep { get; set; }

    private CommissionerReviewForm ReviewForm = new();
    private bool IsSubmitting = false;
    private bool ShowConfirmationDialog = false;
    private ReviewDecision PendingDecision;
    private string RejectionReason = string.Empty;
    private bool CanUserTakeAction = false;

    private decimal TotalAmount => (ReviewForm.DevelopmentCharges ?? 0) + (ReviewForm.ProcessingFees ?? 0);

    protected override async Task OnInitializedAsync()
    {
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await IsInProperRole();

    }
    protected override void OnParametersSet()
    {
        if (Model != null)
        {
            ReviewForm.CommissionerDecisionRemarks = Model.CommissionerDecision ?? string.Empty;
        }

    }

    private async Task IsInProperRole()
    {
        CanUserTakeAction = await AuthenticationStateProvider.IsInRoleAsync("PlanningOfficer")
            || await AuthenticationStateProvider.IsInRoleAsync("Administrator");

        await InvokeAsync(StateHasChanged);
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(ReviewForm.CommissionerDecisionRemarks);
    }

    private int GetActiveConditionsCount()
    {
        int count = 0;
        if (ReviewForm.RequireInspection) count++;
        if (ReviewForm.RequireCompletionCert) count++;
        if (ReviewForm.RequireEnvironmentalClearance) count++;
        if (ReviewForm.RequireFireSafety) count++;
        if (!string.IsNullOrWhiteSpace(ReviewForm.CustomConditions)) count++;
        return count;
    }

    private async Task SaveDraft()
    {
        IsSubmitting = true;
        try
        {
            if (Model != null)
            {
                Model.CommissionerDecision = ReviewForm.CommissionerDecisionRemarks;
                await OnSaveDraft.InvokeAsync(Model);
            }
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private void ShowConfirmDialog(ReviewDecision decision)
    {
        PendingDecision = decision;
        RejectionReason = string.Empty;
        ShowConfirmationDialog = true;
    }

    private void HideConfirmDialog()
    {
        ShowConfirmationDialog = false;
    }

    private async Task ConfirmDecision()
    {
        if (PendingDecision == ReviewDecision.Rejected && string.IsNullOrWhiteSpace(RejectionReason))
        {
            return; // Don't proceed without rejection reason
        }

        IsSubmitting = true;
        ShowConfirmationDialog = false;

        try
        {
            var comments = PendingDecision == ReviewDecision.Rejected ? RejectionReason : ReviewForm.CommissionerDecisionRemarks;

            var request = new AdvanceStepRequestDto
            {
                ApplicationId = Model.Id,
                Decision = PendingDecision,
                Comments = comments,
                PerformedByUserId = (await AuthenticationStateProvider.GetUserIdAsync()) ?? string.Empty,
                PerformedByRole = "Commissioner"
            };

            await OnAdvanceStep.InvokeAsync(request);
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        await Task.CompletedTask;
    }

    public class CommissionerReviewForm
    {
        [Required(ErrorMessage = "Commissioner decision remarks are required")]
        public string CommissionerDecisionRemarks { get; set; } = string.Empty;

        public string? CustomConditions { get; set; }

        public bool RequireInspection { get; set; }
        public bool RequireCompletionCert { get; set; }
        public bool RequireEnvironmentalClearance { get; set; }
        public bool RequireFireSafety { get; set; }

        public decimal? DevelopmentCharges { get; set; }
        public decimal? ProcessingFees { get; set; }

        public bool GeneratePermitPdf { get; set; } = true;
    }
}

<style>
    .bg-purple {
        background-color: #6f42c1 !important;
    }
</style>