using MuniLK.Application.PropertiesLK.DTOs;
using MuniLK.Domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MuniLK.Application.PropertiesLK.Mappings
{
    public static class PropertyMappingProfile
    {
        public static Property ToEntity(this CreatePropertyRequest dto,string? createdBy , Guid? tenantId)
        {
            var PropertyId = Guid.NewGuid();

            var property = new Property
            {
                Id = PropertyId,
                TenantId = tenantId ?? Guid.Empty, // Assign TenantId (handle null if necessary, though it should be provided)
                // PropertyId will be generated by the entity's constructor: $"P{Guid.NewGuid().ToString("N").Substring(0, 8).ToUpper()}"

                Address = dto.Address,
                PropertyTypeId = dto.PropertyTypeId, // Direct mapping of GUID
                AssessmentValue = dto.AssessmentValue,
                WardNumber = dto.WardNumber,
                ZoneId = dto.ZoneId, // Direct mapping of GUID
                LandExtentId = dto.LandExtentId, // Direct mapping of GUID
                LandAreaInSqMeters = dto.LandAreaInSqMeters,
                TitleDeedNumber = dto.TitleDeedNumber,
                OwnershipTypeId = dto.OwnershipTypeId, // Direct mapping of GUID
                IsCommercialUse = dto.IsCommercialUse,
                NumberOfBuildings = dto.NumberOfBuildings,
                ConstructionTypeId = dto.ConstructionTypeId, // Direct mapping of GUID
                RoadAccessTypeId = dto.RoadAccessTypeId, // Direct mapping of GUID
                GSDivisionId = dto.GSDivisionId, // Direct mapping of GUID
                ElectoralDivisionId = dto.ElectoralDivisionId, // Direct mapping of GUID
                WaterConnection = dto.WaterConnection,
                ElectricityConnection = dto.ElectricityConnection,
                LastAssessmentYear = dto.LastAssessmentYear,
                IsDisputed = dto.IsDisputed,
                PhotoUrl = dto.PhotoUrl,
                LocationCoordinates = dto.LocationCoordinates,
                CreatedBy = createdBy,
                CreatedDate = DateTime.UtcNow
            };

            // Map the collection of owners
            if (dto.PropertyOwners != null && dto.PropertyOwners.Any())
            {
                property.PropertyOwners = dto.PropertyOwners.Select(ownerDto => new PropertyOwner
                {
                    Id = Guid.NewGuid(), // Generate a new GUID for each PropertyOwner
                    TenantId = tenantId ?? Guid.Empty, // Assign TenantId to the owner as well
                    PropertyId = property.Id, // Link to the parent Property
                    ContactId = ownerDto.ContactId, // <--- IMPORTANT: Link to the Contact entity
                    OwnershipType = ownerDto.OwnershipType, // Set the ownership type for this association
                    CreatedBy = createdBy, // Optionally inherit CreatedBy from property
                    CreatedDate = DateTime.UtcNow
                }).ToList();
            }

            return property;
        }
    }
}
